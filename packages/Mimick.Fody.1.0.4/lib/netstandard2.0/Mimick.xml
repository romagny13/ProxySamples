<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mimick</name>
    </assembly>
    <members>
        <member name="T:Mimick.Aspect.CompilationImplementsAttribute">
            <summary>
            Indicates compilation instructions that the associated aspect attribute provides an implementation for the
            provided interface type.
            </summary>
            <remarks>
            This attribute should be applied to an aspect attribute, and not directly to a class. The aspect attribute, when
            applied to a class, will automatically weave the implementation type into the target.
            </remarks>
        </member>
        <member name="M:Mimick.Aspect.CompilationImplementsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Aspect.CompilationImplementsAttribute"/> class.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.CompilationImplementsAttribute.Interface">
            <summary>
            Gets or sets the type of the interface which must be implemented.
            </summary>
        </member>
        <member name="T:Mimick.Aspect.CompilationOptionsAttribute">
            <summary>
            Indicates compilation options against an aspect attribute which defines how the attribute will behave during runtime.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.CompilationOptionsAttribute.CopyArguments">
            <summary>
            Gets or sets whether, when used against a method or parameter interceptor, any updates to the arguments of the invocation should
            be copied across to the arguments of the method before the execution of the method body. If enabled, updates to the <see cref="P:Mimick.Aspect.MethodInterceptionArgs.Arguments"/>
            values or an update to the <see cref="P:Mimick.Aspect.ParameterInterceptionArgs.Value"/> will be reflected on the method arguments.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.CompilationOptionsAttribute.Inlining">
            <summary>
            Gets or sets how an aspect attribute should be inlined during compile-time. If not specified, defaults to <see cref="F:Mimick.Aspect.Inlining.Truncate"/>.
            </summary>
            <remarks>
            Any inlining specified is introduced cautiously, rather than aggressively. The compiler will attempt to calculate whether
            a method is eligible for inlining based on the content of the implemented method body.
            </remarks>
        </member>
        <member name="P:Mimick.Aspect.CompilationOptionsAttribute.Scope">
            <summary>
            Gets or sets the persistence scope of the associated attribute. If not specified, defaults to <see cref="F:Mimick.Aspect.AttributeScope.Singleton"/>.
            </summary>
        </member>
        <member name="T:Mimick.Aspect.AttributeScope">
            <summary>
            Indicates how an aspect attribute should persist during the lifetime of an application.
            </summary>
        </member>
        <member name="F:Mimick.Aspect.AttributeScope.Adhoc">
            <summary>
            An attribute should be created whenever required.
            </summary>
        </member>
        <member name="F:Mimick.Aspect.AttributeScope.Instanced">
            <summary>
            An attribute should persist for each instance of the containing type.
            </summary>
            <remarks>
            <para>If an attribute marked as <see cref="F:Mimick.Aspect.AttributeScope.Instanced"/> has constructor arguments,
            the scope is changed to <see cref="F:Mimick.Aspect.AttributeScope.MultiInstanced"/></para>
            <para>If an attribute marked as <see cref="F:Mimick.Aspect.AttributeScope.Instanced"/> is associated with a member or
            class which is <c>static</c> the scope is changed to <see cref="F:Mimick.Aspect.AttributeScope.Singleton"/></para>
            </remarks>
        </member>
        <member name="F:Mimick.Aspect.AttributeScope.MultiInstanced">
            <summary>
            An attribute should persist for each instance of the containing type, with one instance per usage.
            </summary>
            <remarks>
            <para>If an attribute marked as <see cref="F:Mimick.Aspect.AttributeScope.MultiInstanced"/> is associated with a member or
            class which is <c>static</c> the scope is changed to <see cref="F:Mimick.Aspect.AttributeScope.MultiSingleton"/></para>
            </remarks>
        </member>
        <member name="F:Mimick.Aspect.AttributeScope.Singleton">
            <summary>
            An attribute should persist as a singleton within the runtime.
            </summary>
        </member>
        <member name="F:Mimick.Aspect.AttributeScope.MultiSingleton">
            <summary>
            An attribute should persist as a singleton within the runtime, with one instance per usage.
            </summary>
        </member>
        <member name="F:Mimick.Aspect.Inlining.None">
            <summary>
            A method should not be inlined.
            </summary>
        </member>
        <member name="F:Mimick.Aspect.Inlining.Inline">
            <summary>
            A method should be inlined where possible.
            </summary>
        </member>
        <member name="F:Mimick.Aspect.Inlining.Truncate">
            <summary>
            A method should not be implemented or called if the method is considered to be empty.
            </summary>
        </member>
        <member name="F:Mimick.Aspect.Inlining.InlineAndTruncate">
            <summary>
            A method should either be inlined or not implemented or called.
            </summary>
        </member>
        <member name="T:Mimick.Aspect.IInjectAfterInitializer">
            <summary>
            An interface representing an attribute which injects an associated method into the constructor of a type after the method body.
            </summary>
            <remarks>
            The interface does not contain any methods, and implementing attributes will automatically introduce the behaviour
            of copying the associated method invocation into the constructor.
            </remarks>
        </member>
        <member name="T:Mimick.Aspect.IInjectBeforeInitializer">
            <summary>
            An interface representing an attribute which injects an associated method into the constructor of a type before the method body.
            </summary>
            <remarks>
            The interface does not contain any methods, and implementing attributes will automatically introduce the behaviour
            of copying the associated method invocation into the constructor.
            </remarks>
        </member>
        <member name="T:Mimick.Aspect.IInstanceAware">
            <summary>
            An interface representing a requirement that an aspect attribute should be instance aware. If implemented, the attribute
            will be provided with the current instance during invocation. This interface will not be honoured when used with attributes
            under the <see cref="F:Mimick.Aspect.AttributeScope.Singleton"/> scope.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.IInstanceAware.Instance">
            <summary>
            Gets or sets the object instance which the attribute is associated with.
            </summary>
        </member>
        <member name="T:Mimick.Aspect.IMemberAware">
            <summary>
            An interface representing a requirement that an aspect attribute should be member aware. If implemented, the aspect attribute will
            be provided the <see cref="P:Mimick.Aspect.IMemberAware.Member"/> property with the member that the attribute was decorating. The property will not
            be available during attribute construction, but will be available if the <see cref="T:Mimick.Aspect.IRequireInitialization"/> interface is implemented.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.IMemberAware.Member">
            <summary>
            Gets or sets the member that the attribute was associated with.
            </summary>
        </member>
        <member name="T:Mimick.Aspect.IMethodInterceptor">
            <summary>
            An interface representing a method invocation interceptor which encapsulates a method body with additional code.
            </summary>
            <remarks>
            A method interceptor can be associated with constructors, method declarations, and properties. If the interceptor
            is associated with a property then the interception occurs against both the <c>get</c> and <c>set</c> methods.
            </remarks>
        </member>
        <member name="M:Mimick.Aspect.IMethodInterceptor.OnEnter(Mimick.Aspect.MethodInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.Aspect.IMethodInterceptor.OnException(Mimick.Aspect.MethodInterceptionArgs,System.Exception)">
            <summary>
            Called when a method has been invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.Aspect.IMethodInterceptor.OnExit(Mimick.Aspect.MethodInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="T:Mimick.Aspect.IMethodReturnInterceptor">
            <summary>
            An interface representing a method return value interceptor which evaluates code against a method return value prior
            to the method returning.
            </summary>
            <remarks>
            A method return interceptor is called at the final stages of method execution, following any method or parameter interceptors. If
            an interceptor has changed the value being returned, then this value will be reflected in the event arguments.
            </remarks>
        </member>
        <member name="M:Mimick.Aspect.IMethodReturnInterceptor.OnReturn(Mimick.Aspect.MethodReturnInterceptionArgs)">
            <summary>
            Called when a method is invoked and is returning.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="T:Mimick.Aspect.IntroducesAttribute">
            <summary>
            Indicates that the associated member should introduce new members to the declaring type.
            </summary>
        </member>
        <member name="M:Mimick.Aspect.IntroducesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Aspect.IntroducesAttribute" /> class.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.IntroducesAttribute.DeclaringMember">
            <summary>
            Gets or sets the member associated with the attribute.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.IntroducesAttribute.DeclaringType">
            <summary>
            Gets or sets the declaring type associated with the attribute.
            </summary>
        </member>
        <member name="M:Mimick.Aspect.IntroducesAttribute.OnInitialize">
            <summary>
            Called when the attribute has been instantiated and the declaring members information has been populated.
            </summary>
        </member>
        <member name="T:Mimick.Aspect.IParameterInterceptor">
            <summary>
            An interface representing a method invocation parameter interceptor which provides additional code before the execution of a method.
            </summary>
        </member>
        <member name="M:Mimick.Aspect.IParameterInterceptor.OnEnter(Mimick.Aspect.ParameterInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes before the method body and method interceptors.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="T:Mimick.Aspect.IPropertyGetInterceptor">
            <summary>
            An interface representing a property <c>get</c> method interceptor which encapsulates a method body with additional code.
            </summary>
        </member>
        <member name="M:Mimick.Aspect.IPropertyGetInterceptor.OnException(Mimick.Aspect.PropertyInterceptionArgs,System.Exception)">
            <summary>
            Called when a property <c>get</c> method is invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.Aspect.IPropertyGetInterceptor.OnExit(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>get</c> method is intercepted and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.Aspect.IPropertyGetInterceptor.OnGet(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>get</c> method is intercepted and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
            <remarks>
            If the property has a generated backing field, the value of the field will be loaded into the
            <see cref="P:Mimick.Aspect.PropertyInterceptionArgs.Value"/> property. If the value of this property is changed
            during the interception, the updated value will be copied into the backing field.
            </remarks>
        </member>
        <member name="T:Mimick.Aspect.IPropertySetInterceptor">
            <summary>
            An interface representing a property <c>set</c> method interceptor which encapsulates a method body with additional code.
            </summary>
        </member>
        <member name="M:Mimick.Aspect.IPropertySetInterceptor.OnException(Mimick.Aspect.PropertyInterceptionArgs,System.Exception)">
            <summary>
            Called when a property <c>set</c> method is invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.Aspect.IPropertySetInterceptor.OnExit(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.Aspect.IPropertySetInterceptor.OnSet(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
            <remarks>
            The value of the <see cref="P:Mimick.Aspect.PropertyInterceptionArgs.Value"/> property will be populated with the
            updated value which has been assigned during the set operation.
            </remarks>
        </member>
        <member name="T:Mimick.Aspect.IRequireInitialization">
            <summary>
            An interface representing a requirement that an aspect attribute must be initialized after having been constructed. If implemented, an attribute
            will be initialized after having been fully configured.
            </summary>
        </member>
        <member name="M:Mimick.Aspect.IRequireInitialization.Initialize">
            <summary>
            Initialize the attribute.
            </summary>
        </member>
        <member name="T:Mimick.Aspect.MethodInterceptionArgs">
            <summary>
            An event arguments class containing information relevant to a method interception event.
            </summary>
        </member>
        <member name="M:Mimick.Aspect.MethodInterceptionArgs.#ctor(System.Object,System.Object[],System.Object,System.Reflection.MethodBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Aspect.MethodInterceptionArgs"/> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="arguments">The arguments.</param>
            <param name="returns">The returns.</param>
            <param name="method">The method.</param>
        </member>
        <member name="P:Mimick.Aspect.MethodInterceptionArgs.Arguments">
            <summary>
            Gets the arguments which were supplied into the method during invocation. The property cannot be changed, but
            the individual argument values can be changed.
            </summary>
            <remarks>
            The values assigned to the arguments array must match those defined against the method, and will not be copied
            back to the method arguments unless the option <see cref="P:Mimick.Aspect.CompilationOptionsAttribute.CopyArguments"/> is enabled.
            </remarks>
        </member>
        <member name="P:Mimick.Aspect.MethodInterceptionArgs.Cancel">
            <summary>
            Gets or sets whether the method invocation should terminate immediately.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.MethodInterceptionArgs.Instance">
            <summary>
            Gets the object instance for which the method interception is occurring. If the method is <c>static</c>
            then this value will be <c>null</c>.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.MethodInterceptionArgs.Method">
            <summary>
            Gets the method which has been intercepted.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.MethodInterceptionArgs.Return">
            <summary>
            Gets or sets the value which must be returned from the method. If the method does not have a return value
            then the value assigned here will be ignored.
            </summary>
            <remarks>
            The value assigned to this property must match that of the return type of the method. If the method does
            not return a value then any value assigned here will be discarded.
            </remarks>
        </member>
        <member name="T:Mimick.Aspect.MethodReturnInterceptionArgs">
            <summary>
            An event arguments class containing information relevant to a method return interception event.
            </summary>
        </member>
        <member name="M:Mimick.Aspect.MethodReturnInterceptionArgs.#ctor(System.Object,System.Object,System.Reflection.MethodBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Aspect.MethodReturnInterceptionArgs"/> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="returns">The returns.</param>
            <param name="method">The method.</param>
        </member>
        <member name="P:Mimick.Aspect.MethodReturnInterceptionArgs.Instance">
            <summary>
            Gets the object instance for which the method interception is occurring. If the method is <c>static</c>
            then this value will be <c>null</c>.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.MethodReturnInterceptionArgs.Method">
            <summary>
            Gets the method which has been intercepted.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.MethodReturnInterceptionArgs.Value">
            <summary>
            Gets or sets the value which has been returned from the method. If the method does not have a return value
            then the value here will be <c>null</c>.
            </summary>
            <remarks>
            The value assigned to this property must match that of the return type of the method. If the method does
            not return a value then any value assigned here will be discarded.
            </remarks>
        </member>
        <member name="T:Mimick.Aspect.ParameterInterceptionArgs">
            <summary>
            An event arguments class containing information relevant to the interception of a parameter.
            </summary>
        </member>
        <member name="M:Mimick.Aspect.ParameterInterceptionArgs.#ctor(System.Object,System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Aspect.ParameterInterceptionArgs" /> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameter">The parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Mimick.Aspect.ParameterInterceptionArgs.Instance">
            <summary>
            Gets the object instance for which the parameter interception is occurring. If the parent method is <c>static</c>
            then this value will be <c>null</c>.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.ParameterInterceptionArgs.Parameter">
            <summary>
            Gets the parameter which has been intercepted.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.ParameterInterceptionArgs.Value">
            <summary>
            Gets or sets the value of the argument which was supplied into the method during invocation.
            </summary>
            <remarks>
            The value assigned to this property must match the type of the parameter, and will not be copied
            back to the method arguments unless the option <see cref="P:Mimick.Aspect.CompilationOptionsAttribute.CopyArguments"/> is enabled.
            </remarks>
        </member>
        <member name="T:Mimick.Aspect.PropertyInterceptionArgs">
            <summary>
            An event arguments class containing information relevant to the interception of a property.
            </summary>
        </member>
        <member name="M:Mimick.Aspect.PropertyInterceptionArgs.#ctor(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Aspect.PropertyInterceptionArgs" /> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="property">The property.</param>
            <param name="val">The value.</param>
        </member>
        <member name="P:Mimick.Aspect.PropertyInterceptionArgs.Instance">
            <summary>
            Gets the object instance for which the property interception is occurring. If the parent class is <c>static</c>
            then this value will be <c>null</c>.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.PropertyInterceptionArgs.IsDirty">
            <summary>
            Gets whether the property value has become dirty after having been assigned during interception.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.PropertyInterceptionArgs.Property">
            <summary>
            Gets the property which has been intercepted.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.PropertyInterceptionArgs.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="T:Mimick.Aspect.ActionAttribute">
            <summary>
            Indicates that the associated parameter, property or method return value should have an action applied to it. When applied to
            a method, all parameters are actioned using the attribute.
            </summary>
        </member>
        <member name="M:Mimick.Aspect.ActionAttribute.Apply(System.Object,System.Type)">
            <summary>
            Applies the action to the parameter, property or return value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The value type.</param>
            <returns>The actioned value.</returns>
        </member>
        <member name="M:Mimick.Aspect.ActionAttribute.OnEnter(Mimick.Aspect.ParameterInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes before the method body and method interceptors.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.Aspect.ActionAttribute.OnException(Mimick.Aspect.PropertyInterceptionArgs,System.Exception)">
            <summary>
            Called when a property <c>set</c> method is invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.Aspect.ActionAttribute.OnExit(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.Aspect.ActionAttribute.OnReturn(Mimick.Aspect.MethodReturnInterceptionArgs)">
            <summary>
            Called when a method is invoked and is returning.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.Aspect.ActionAttribute.OnSet(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
            <remarks>
            The value of the <see cref="P:Mimick.Aspect.PropertyInterceptionArgs.Value" /> property will be populated with the
            updated value which has been assigned during the set operation.
            </remarks>
        </member>
        <member name="T:Mimick.Aspect.ValidationAttribute">
            <summary>
            Indicates that the associated parameter or property should be validated. When applied to a method, all parameters
            are validated using the attribute.
            </summary>
        </member>
        <member name="P:Mimick.Aspect.ValidationAttribute.Instance">
            <summary>
            Gets or sets the object instance which the attribute is associated with.
            </summary>
        </member>
        <member name="M:Mimick.Aspect.ValidationAttribute.OnEnter(Mimick.Aspect.ParameterInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes before the method body and method interceptors.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.Aspect.ValidationAttribute.OnException(Mimick.Aspect.PropertyInterceptionArgs,System.Exception)">
            <summary>
            Called when a property <c>set</c> method is invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.Aspect.ValidationAttribute.OnExit(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.Aspect.ValidationAttribute.OnSet(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
            <remarks>
            The value of the <see cref="P:Mimick.Aspect.PropertyInterceptionArgs.Value" /> property will be populated with the
            updated value which has been assigned during the set operation.
            </remarks>
        </member>
        <member name="M:Mimick.Aspect.ValidationAttribute.Validate(System.String,System.Type,System.Object)">
            <summary>
            Validate the value of the parameter or property.
            </summary>
            <param name="name">The parameter or property name.</param>
            <param name="type">The parameter or property type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Mimick.LowerCaseAttribute">
            <summary>
            Indicates that the associated property, parameter or return value should be converted to lower-case. When applied to a method all parameters
            will be converted where supported.
            </summary>
            <remarks>
            This attribute will work against types which can be cased, including <see cref="T:System.String"/> and <see cref="T:System.Text.StringBuilder"/>. If the value is <c>null</c> or the value type
            is not supported then the attribute will not perform any casing operation.
            </remarks>
        </member>
        <member name="M:Mimick.LowerCaseAttribute.Apply(System.Object,System.Type)">
            <summary>
            Applies the action to the parameter, property or return value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The value type.</param>
            <returns>
            The actioned value.
            </returns>
        </member>
        <member name="T:Mimick.ReplaceAttribute">
            <summary>
            Indicates that the associated property, parameter or return value should have values replaced depending on a provided pattern and replacement
            value. When applied to a method all parameters will be replaced where supported.
            </summary>
            <remarks>
            This attribute will work against types which can be replaced, including <see cref="T:System.String"/> and <see cref="T:System.Text.StringBuilder"/>. If the value is <c>null</c> or the value type
            is not supported then the attribute will not perform any replace operation.
            </remarks>
        </member>
        <member name="M:Mimick.ReplaceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ReplaceAttribute" /> class.
            </summary>
            <param name="regex">The regular expression pattern used to match the values to replace.</param>
            <param name="replacement">The replacement value which should replace the matches.</param>
        </member>
        <member name="M:Mimick.ReplaceAttribute.#ctor(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ReplaceAttribute" /> class.
            </summary>
            <param name="regex">The regular expression pattern used to match the values to replace.</param>
            <param name="replacement">The replacement value which should replace the matches.</param>
            <param name="options">The regular expression options.</param>
        </member>
        <member name="P:Mimick.ReplaceAttribute.Regex">
            <summary>
            Gets the regular expression pattern.
            </summary>
        </member>
        <member name="P:Mimick.ReplaceAttribute.Replacement">
            <summary>
            Gets the replacement value.
            </summary>
        </member>
        <member name="M:Mimick.ReplaceAttribute.Apply(System.Object,System.Type)">
            <summary>
            Applies the action to the parameter, property or return value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The value type.</param>
            <returns>
            The actioned value.
            </returns>
        </member>
        <member name="T:Mimick.RoundAttribute">
            <summary>
            Indicates that the associated property, parameter or return value should be rounded to a nearest value. When applied to a method
            all parameters will be rounded where supported.
            </summary>
            <remarks>
            This attribute will work against numeric types. If the value is <c>null</c> or the value type is not supported then the attribute will not perform any rounding operation.
            </remarks>
        </member>
        <member name="M:Mimick.RoundAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.RoundAttribute"/> class.
            </summary>
        </member>
        <member name="M:Mimick.RoundAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.RoundAttribute" /> class.
            </summary>
            <param name="decimals">The number of decimal places to round to.</param>
        </member>
        <member name="M:Mimick.RoundAttribute.#ctor(System.MidpointRounding)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.RoundAttribute" /> class.
            </summary>
            <param name="rounding">The rounding method to use.</param>
        </member>
        <member name="M:Mimick.RoundAttribute.#ctor(System.Int32,System.MidpointRounding)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.RoundAttribute"/> class.
            </summary>
            <param name="decimals">The number of decimal places to round to.</param>
            <param name="rounding">The rounding method to use.</param>
        </member>
        <member name="P:Mimick.RoundAttribute.Decimals">
            <summary>
            Gets the number of decimal places which should be rounded to. If not supplied, this defaults to zero.
            </summary>
        </member>
        <member name="P:Mimick.RoundAttribute.Rounding">
            <summary>
            Gets the rounding method which should be used. If not supplied, this defaults to <see cref="F:System.MidpointRounding.AwayFromZero"/>.
            </summary>
        </member>
        <member name="M:Mimick.RoundAttribute.Apply(System.Object,System.Type)">
            <summary>
            Applies the action to the parameter, property or return value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The value type.</param>
            <returns>
            The actioned value.
            </returns>
        </member>
        <member name="T:Mimick.TrimAttribute">
            <summary>
            Indicates that the associated property, parameter or method return value should be trimmed. When applied to a method, all parameters will be trimmed where supported.
            </summary>
            <remarks>
            This attribute will work against types which can be trimmed, including <see cref="T:System.String"/> and <see cref="T:System.Text.StringBuilder"/>. If the value is <c>null</c> or the value type
            is not supported then the attribute will not perform any trim operation.
            </remarks>
        </member>
        <member name="M:Mimick.TrimAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.TrimAttribute" /> class.
            </summary>
        </member>
        <member name="M:Mimick.TrimAttribute.Apply(System.Object,System.Type)">
            <summary>
            Applies the action to the parameter, property or return value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The value type.</param>
            <returns>
            The actioned value.
            </returns>
        </member>
        <member name="T:Mimick.UpperCaseAttribute">
            <summary>
            Indicates that the associated property, parameter or return value should be converted to upper-case. When applied to a method all parameters
            will be converted where supported.
            </summary>
            <remarks>
            This attribute will work against types which can be cased, including <see cref="T:System.String"/> and <see cref="T:System.Text.StringBuilder"/>. If the value is <c>null</c> or the value type
            is not supported then the attribute will not perform any casing operation.
            </remarks>
        </member>
        <member name="M:Mimick.UpperCaseAttribute.Apply(System.Object,System.Type)">
            <summary>
            Applies the action to the parameter, property or return value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The value type.</param>
            <returns>
            The actioned value.
            </returns>
        </member>
        <member name="T:Mimick.AutowireAttribute">
            <summary>
            Indicates that the associated field, property or parameter should be injected with a value stored within the
            dependency container of the context.
            </summary>
            <remarks>
            When applied at the method level, the injection will occur across all parameters of the method.
            </remarks>
        </member>
        <member name="M:Mimick.AutowireAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.AutowireAttribute" /> class.
            </summary>
        </member>
        <member name="M:Mimick.AutowireAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.AutowireAttribute"/> class.
            </summary>
            <param name="name">The name of the dependency.</param>
        </member>
        <member name="P:Mimick.AutowireAttribute.Name">
            <summary>
            Gets the optional name qualifier of the dependency.
            </summary>
        </member>
        <member name="M:Mimick.AutowireAttribute.OnEnter(Mimick.Aspect.ParameterInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes before the method body and method interceptors.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.AutowireAttribute.OnException(Mimick.Aspect.PropertyInterceptionArgs,System.Exception)">
            <summary>
            Called when a property <c>get</c> method is invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.AutowireAttribute.OnExit(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>get</c> method is intercepted and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.AutowireAttribute.OnGet(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>get</c> method is intercepted and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
            <remarks>
            If the property has a generated backing field, the value of the field will be loaded into the
            <see cref="P:Mimick.Aspect.PropertyInterceptionArgs.Value" /> property. If the value of this property is changed
            during the interception, the updated value will be copied into the backing field.
            </remarks>
        </member>
        <member name="M:Mimick.AutowireAttribute.Resolve(System.Type)">
            <summary>
            Resolves the dependency for the provided type, using the optional name qualifier.
            </summary>
            <param name="type">The dependency type.</param>
            <returns></returns>
        </member>
        <member name="T:Mimick.DisposableAttribute">
            <summary>
            Indicates that the associated declaring class should implement the <see cref="T:System.IDisposable"/> interface and automatically
            call the associated method upon disposal.
            </summary>
            <remarks>
            The attribute can be applied to more than one method, and each will execute in no specific order.
            </remarks>
        </member>
        <member name="P:Mimick.DisposableAttribute.Instance">
            <summary>
            Gets or sets the object instance which the attribute is associated with.
            </summary>
        </member>
        <member name="P:Mimick.DisposableAttribute.IsDisposed">
            <summary>
            Gets or sets whether the object has been disposed.
            </summary>
        </member>
        <member name="M:Mimick.DisposableAttribute.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.DisposableAttribute.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
              <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Mimick.IDisposableAndTracked">
            <summary>
            An interface representing the dispose state of an object.
            </summary>
        </member>
        <member name="P:Mimick.IDisposableAndTracked.IsDisposed">
            <summary>
            Gets or sets whether the object has been disposed.
            </summary>
        </member>
        <member name="M:Mimick.IDisposableAndTracked.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
              <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Mimick.FreezableAttribute">
            <summary>
            Indicates that the associated class should implement the <see cref="T:Mimick.IFreezable"/> interface to prevent external changes to
            properties of the object instance once frozen.
            </summary>
            <remarks>
            This attribute implements the <see cref="T:Mimick.IFreezable"/> interface and places protection on all property setters to prevent
            modification once the object has been frozen. This attribute does not prevent modification to fields within the instance,
            but does prevent external changes.
            </remarks>
        </member>
        <member name="M:Mimick.FreezableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.FreezableAttribute" /> class.
            </summary>
        </member>
        <member name="P:Mimick.FreezableAttribute.IsFrozen">
            <summary>
            Gets whether the object instance has been frozen.
            </summary>
        </member>
        <member name="M:Mimick.FreezableAttribute.Freeze">
            <summary>
            Freezes the object instance and prevents further modifications to the fields and properties of the instance.
            </summary>
            <exception cref="T:Mimick.FrozenException">If the object has already been frozen.</exception>
        </member>
        <member name="M:Mimick.FreezableAttribute.OnException(Mimick.Aspect.PropertyInterceptionArgs,System.Exception)">
            <summary>
            Called when a property <c>set</c> method is invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.FreezableAttribute.OnExit(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.FreezableAttribute.OnSet(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
            <exception cref="T:System.InvalidOperationException">The object has been frozen and cannot receive updates</exception>
            <remarks>
            The value of the <see cref="P:Mimick.Aspect.PropertyInterceptionArgs.Value" /> property will be populated with the
            updated value which has been assigned during the set operation.
            </remarks>
        </member>
        <member name="T:Mimick.PropertyChangedAttribute">
            <summary>
            Indicates that the associated class should implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface and
            automatically introduce the behaviour to all properties.
            </summary>
        </member>
        <member name="M:Mimick.PropertyChangedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.PropertyChangedAttribute" /> class.
            </summary>
        </member>
        <member name="E:Mimick.PropertyChangedAttribute.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Mimick.PropertyChangedAttribute.OnException(Mimick.Aspect.PropertyInterceptionArgs,System.Exception)">
            <summary>
            Called when a property <c>set</c> method is invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.PropertyChangedAttribute.OnExit(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.PropertyChangedAttribute.OnSet(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
            <remarks>
            The value of the <see cref="P:Mimick.Aspect.PropertyInterceptionArgs.Value" /> property will be populated with the
            updated value which has been assigned during the set operation.
            </remarks>
        </member>
        <member name="T:Mimick.IgnoreChangeAttribute">
            <summary>
            Indicates that the associated property should not generate a <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:Mimick.IgnoreChangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.IgnoreChangeAttribute" /> class.
            </summary>
        </member>
        <member name="T:Mimick.PropertyChangingAttribute">
            <summary>
            Indicates that the associated class should implement the <see cref="T:System.ComponentModel.INotifyPropertyChanging"/> interface and
            automatically introduce the behaviour to all properties.
            </summary>
        </member>
        <member name="M:Mimick.PropertyChangingAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.PropertyChangingAttribute" /> class.
            </summary>
        </member>
        <member name="E:Mimick.PropertyChangingAttribute.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="M:Mimick.PropertyChangingAttribute.OnException(Mimick.Aspect.PropertyInterceptionArgs,System.Exception)">
            <summary>
            Called when a property <c>set</c> method is invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.PropertyChangingAttribute.OnExit(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.PropertyChangingAttribute.OnSet(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
            <remarks>
            The value of the <see cref="P:Mimick.Aspect.PropertyInterceptionArgs.Value" /> property will be populated with the
            updated value which has been assigned during the set operation.
            </remarks>
        </member>
        <member name="T:Mimick.IgnoreChangingAttribute">
            <summary>
            Indicates that the associated property should not generate a <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/> event.
            </summary>
        </member>
        <member name="M:Mimick.IgnoreChangingAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.IgnoreChangingAttribute" /> class.
            </summary>
        </member>
        <member name="T:Mimick.CachedAttribute">
            <summary>
            Indicates that the associated method return value should be cached dependending on the parameters.
            </summary>
        </member>
        <member name="F:Mimick.CachedAttribute.sha256">
            <summary>
            The managed encryption instance used to generate hashes of parameter values.
            </summary>
        </member>
        <member name="M:Mimick.CachedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.CachedAttribute" /> class.
            </summary>
        </member>
        <member name="M:Mimick.CachedAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.CachedAttribute" /> class.
            </summary>
            <param name="maxCount">The maximum count.</param>
        </member>
        <member name="M:Mimick.CachedAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.CachedAttribute"/> class.
            </summary>
            <param name="maxCount">The maximum count.</param>
            <param name="maxTimeMilliseconds">The maximum time in milliseconds.</param>
        </member>
        <member name="P:Mimick.CachedAttribute.Member">
            <summary>
            Gets or sets the member that the attribute was associated with.
            </summary>
        </member>
        <member name="M:Mimick.CachedAttribute.Initialize">
            <summary>
            Initialize the attribute.
            </summary>
        </member>
        <member name="M:Mimick.CachedAttribute.OnEnter(Mimick.Aspect.MethodInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.CachedAttribute.OnException(Mimick.Aspect.MethodInterceptionArgs,System.Exception)">
            <summary>
            Called when a method has been invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.CachedAttribute.OnExit(Mimick.Aspect.MethodInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.CachedAttribute.GetHash(System.Object[])">
            <summary>
            Gets a unique hash for the provided parameter collection.
            </summary>
            <param name="values">The parameter values.</param>
            <returns>The unique hash.</returns>
        </member>
        <member name="T:Mimick.ComponentAttribute">
            <summary>
            Indicates that the associated class is a component of the framework, and should be registered when the framework initializes.
            </summary>
        </member>
        <member name="M:Mimick.ComponentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ComponentAttribute" /> class.
            </summary>
        </member>
        <member name="M:Mimick.ComponentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ComponentAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Mimick.ComponentAttribute.#ctor(Mimick.Scope)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ComponentAttribute"/> class.
            </summary>
            <param name="scope">The scope.</param>
        </member>
        <member name="M:Mimick.ComponentAttribute.#ctor(System.String,Mimick.Scope)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ComponentAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="P:Mimick.ComponentAttribute.Name">
            <summary>
            Gets or sets the optional name of the component when registered in the framework. When set, the component can still be
            resolved based on the <see cref="T:System.Type"/>, but a name provides an additional level of qualification.
            </summary>
        </member>
        <member name="P:Mimick.ComponentAttribute.Scope">
            <summary>
            Gets or sets how the component should be managed within the containing framework.
            </summary>
        </member>
        <member name="T:Mimick.Scope">
            <summary>
            Indicates how a component should be managed within the containing framework.
            </summary>
        </member>
        <member name="F:Mimick.Scope.Adhoc">
            <summary>
            The component should be created each time it's required.
            </summary>
        </member>
        <member name="F:Mimick.Scope.Singleton">
            <summary>
            The component should persist as a singleton instance for the duration of the framework.
            </summary>
        </member>
        <member name="F:Mimick.Scope.Thread">
            <summary>
            The component should persist as a singleton instance for the duration of a thread, created only when required.
            </summary>
        </member>
        <member name="T:Mimick.ConfigurationAttribute">
            <summary>
            Indicates that the associated class should be loaded, constructed and processed as a configuration source when
            the Mimick framework is initialized.
            </summary>
        </member>
        <member name="M:Mimick.ConfigurationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ConfigurationAttribute" /> class.
            </summary>
        </member>
        <member name="T:Mimick.MaximumAttribute">
            <summary>
            Indicates that the associated parameter or property must have a value less than or equal to the provided amount. When applied to a
            method, all parameters are validated.
            </summary>
            <remarks>
            The attribute can only be applied to numeric values.
            </remarks>
        </member>
        <member name="M:Mimick.MaximumAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.MaximumAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Mimick.MaximumAttribute.Value">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="M:Mimick.MaximumAttribute.OnReturn(Mimick.Aspect.MethodReturnInterceptionArgs)">
            <summary>
            Called when a method is invoked and is returning.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.MaximumAttribute.Validate(System.String,System.Type,System.Object)">
            <summary>
            Validate the value of the parameter or property.
            </summary>
            <param name="name">The parameter or property name.</param>
            <param name="type">The parameter or property type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Mimick.MaxLengthAttribute">
            <summary>
            Indicates that the associated parameter or property must have a total length of less than or equal to the provided amount. When applied to a
            method, all parameters are validated.
            </summary>
            <remarks>
            The attribute can be applied to <see cref="T:System.String"/>, <see cref="T:System.Text.StringBuilder"/>, <see cref="T:System.Collections.IList" />, <see cref="T:System.Collections.ICollection"/>, <see cref="T:System.Collections.IEnumerable"/>
            and <see cref="T:System.Array"/> types. If the value of the parameter or property is <c>null</c> the value will pass validation.
            </remarks>
        </member>
        <member name="M:Mimick.MaxLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.MaxLengthAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Mimick.MaxLengthAttribute.Value">
            <summary>
            Gets the maximum length value.
            </summary>
        </member>
        <member name="M:Mimick.MaxLengthAttribute.Validate(System.String,System.Type,System.Object)">
            <summary>
            Validate the value of the parameter or property.
            </summary>
            <param name="name">The parameter or property name.</param>
            <param name="type">The parameter or property type.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Mimick.MinimumAttribute">
            <summary>
            Indicates that the associated parameter or property must have a value greater than or equal to the provided amount. When applied to a
            method, all parameters are validated.
            </summary>
        </member>
        <member name="M:Mimick.MinimumAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.MinimumAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Mimick.MinimumAttribute.Value">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="M:Mimick.MinimumAttribute.OnReturn(Mimick.Aspect.MethodReturnInterceptionArgs)">
            <summary>
            Called when a method is invoked and is returning.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.MinimumAttribute.Validate(System.String,System.Type,System.Object)">
            <summary>
            Validate the value of the parameter or property.
            </summary>
            <param name="name">The parameter or property name.</param>
            <param name="type">The parameter or property type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Mimick.MinLengthAttribute">
            <summary>
            Indicates that the associated parameter or property must have a total length of greater than or equal to the provided amount. When applied to a
            method, all parameters are validated.
            </summary>
            <remarks>
            The attribute can be applied to <see cref="T:System.String"/>, <see cref="T:System.Text.StringBuilder"/>, <see cref="T:System.Collections.IList" />, <see cref="T:System.Collections.ICollection"/>, <see cref="T:System.Collections.IEnumerable"/>
            and <see cref="T:System.Array"/> types. If the value of the parameter or property is <c>null</c> the value will also fail.
            </remarks>
        </member>
        <member name="M:Mimick.MinLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.MinLengthAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Mimick.MinLengthAttribute.Value">
            <summary>
            Gets the minimum length value.
            </summary>
        </member>
        <member name="M:Mimick.MinLengthAttribute.Validate(System.String,System.Type,System.Object)">
            <summary>
            Validate the value of the parameter or property.
            </summary>
            <param name="name">The parameter or property name.</param>
            <param name="type">The parameter or property type.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Mimick.NotEmptyAttribute">
            <summary>
            Indicates that the associated parameter or property should not be <c>null</c> or empty. When applied to a method, all parameters will be validated.
            </summary>
            <remarks>
            The attribute will work against types which can be considered empty, including <see cref="T:System.String"/>, <see cref="T:System.Collections.ICollection"/>,
            <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Array"/>.
            </remarks>
        </member>
        <member name="M:Mimick.NotEmptyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.NotEmptyAttribute" /> class.
            </summary>
        </member>
        <member name="M:Mimick.NotEmptyAttribute.OnReturn(Mimick.Aspect.MethodReturnInterceptionArgs)">
            <summary>
            Called when a method is invoked and is returning.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.NotEmptyAttribute.Validate(System.String,System.Type,System.Object)">
            <summary>
            Validate the value of the parameter or property.
            </summary>
            <param name="name">The parameter or property name.</param>
            <param name="type">The parameter or property type.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">The value cannot be null or empty</exception>
        </member>
        <member name="T:Mimick.NotNullAttribute">
            <summary>
            Indicates that the associated parameter or property should not be <c>null</c>. When applied to a method, all parameters will be validated.
            </summary>
        </member>
        <member name="M:Mimick.NotNullAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.NotNullAttribute" /> class.
            </summary>
        </member>
        <member name="M:Mimick.NotNullAttribute.OnReturn(Mimick.Aspect.MethodReturnInterceptionArgs)">
            <summary>
            Called when a method is invoked and is returning.
            </summary>
            <param name="e">The interception event arguments.</param>
            <exception cref="T:System.ArgumentNullException">Cannot return a null value</exception>
        </member>
        <member name="M:Mimick.NotNullAttribute.Validate(System.String,System.Type,System.Object)">
            <summary>
            Validate the value of the parameter or property.
            </summary>
            <param name="name">The parameter or property name.</param>
            <param name="type">The parameter or property type.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Mimick.PatternAttribute">
            <summary>
            Indicates that the associated parameter or property must not be <c>null</c> and must match a provided regular expression.
            When applied to a method all parameters are validated.
            </summary>
            <remarks>
            The attribute can be applied to any parameter type, and the argument will be converted into a <see cref="T:System.String"/> before the pattern is validated. If
            attempting to validate a pattern against a class object, ensure that the <see cref="M:System.Object.ToString"/> method has been overridden to produce a value
            which can be validated.
            </remarks>
        </member>
        <member name="M:Mimick.PatternAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.PatternAttribute"/> class.
            </summary>
            <param name="pattern">The regular expression pattern which must be matched.</param>
        </member>
        <member name="P:Mimick.PatternAttribute.Pattern">
            <summary>
            Gets the regular expression pattern.
            </summary>
        </member>
        <member name="M:Mimick.PatternAttribute.Validate(System.String,System.Type,System.Object)">
            <summary>
            Validate the value of the parameter or property.
            </summary>
            <param name="name">The parameter or property name.</param>
            <param name="type">The parameter or property type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Mimick.FrameworkAttribute">
            <summary>
            Indicates that the associated class or member has some relevance to the framework. This attribute alone is irrelevant, but
            implementing attributes will be resolved by the framework.
            </summary>
        </member>
        <member name="M:Mimick.FrameworkAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.FrameworkAttribute" /> class.
            </summary>
        </member>
        <member name="T:Mimick.PostConstructAttribute">
            <summary>
            Indicates that the associated method should be called immediately after the object has been initialized.
            </summary>
            <remarks>
            This attribute cannot be used against generic methods.
            </remarks>
        </member>
        <member name="M:Mimick.PostConstructAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.PostConstructAttribute" /> class.
            </summary>
        </member>
        <member name="T:Mimick.PreConstructAttribute">
            <summary>
            Indicates that the associated method should be called immediately before the object has been initialized. The method
            will be called before the object constructor body, but after the base constructor is called.
            </summary>
            <remarks>
            This attribute cannot be used against generic methods. There is the possibility of a race condition here in that
            a method invoked before the object has been initialized could attempt to access fields and properties which have not
            yet been initialized by the framework. This method should not attempt to access any members of the same object.
            </remarks>
        </member>
        <member name="M:Mimick.PreConstructAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.PreConstructAttribute" /> class.
            </summary>
        </member>
        <member name="T:Mimick.ProvideAttribute">
            <summary>
            Indicates that the associated method or property provides a configuration value with the provided name. This method works
            on members of types which have been decorated with the <see cref="T:Mimick.ConfigurationAttribute"/> decoration.
            </summary>
        </member>
        <member name="M:Mimick.ProvideAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ProvideAttribute"/> class.
            </summary>
            <param name="name">The name of the configuration which the member provides.</param>
        </member>
        <member name="P:Mimick.ProvideAttribute.Name">
            <summary>
            Gets the name of the configuration which the member provides.
            </summary>
        </member>
        <member name="T:Mimick.ReaderAttribute">
            <summary>
            Indicates that the associated method or property should be invoked concurrently, requiring a read lock when the method is entered. When applied
            to a property, the <c>get</c> method of the property is encapsulated with the read lock.
            </summary>
        </member>
        <member name="P:Mimick.ReaderAttribute.Mimick#IRequireSynchronization#SynchronizationContext">
            <summary>
              Gets or sets the synchronization context used for concurrent read and write locks.
            </summary>
        </member>
        <member name="P:Mimick.ReaderAttribute.Mimick#Aspect#IInstanceAware#Instance">
            <summary>
            Gets or sets the object instance which the attribute is associated with.
            </summary>
        </member>
        <member name="M:Mimick.ReaderAttribute.GetSynchronizationLock">
            <summary>
            Gets the lock mechanism used when synchronizing.
            </summary>
            <returns>A <see cref="T:System.Threading.ReaderWriterLockSlim"/> value.</returns>
        </member>
        <member name="M:Mimick.ReaderAttribute.Initialize">
            <summary>
            Initialize the attribute.
            </summary>
        </member>
        <member name="M:Mimick.ReaderAttribute.OnEnter(Mimick.Aspect.MethodInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.ReaderAttribute.OnException(Mimick.Aspect.MethodInterceptionArgs,System.Exception)">
            <summary>
            Called when a method has been invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.ReaderAttribute.OnException(Mimick.Aspect.PropertyInterceptionArgs,System.Exception)">
            <summary>
            Called when a property <c>get</c> method is invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.ReaderAttribute.OnExit(Mimick.Aspect.MethodInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.ReaderAttribute.OnExit(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>get</c> method is intercepted and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.ReaderAttribute.OnGet(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>get</c> method is intercepted and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
            <remarks>
            If the property has a generated backing field, the value of the field will be loaded into the
            <see cref="P:Mimick.Aspect.PropertyInterceptionArgs.Value" /> property. If the value of this property is changed
            during the interception, the updated value will be copied into the backing field.
            </remarks>
        </member>
        <member name="T:Mimick.ScheduledAttribute">
            <summary>
            Indicates that the associated method should be invoked at a provided interval from when the framework initializes. If the attribute is
            associated with a non-static method, the declaring type should be decorated with the <see cref="T:Mimick.ComponentAttribute"/> decoration. The method
            should not contain any non-optional parameters, except for a <see cref="T:Mimick.ITimedTask"/> parameter which will be populated with the task relevant
            to the method invocation.
            </summary>
            <remarks>
            A timed interval executes only after the interval has expired between invocations, meaning that the next interval will not start until the
            previous method invocation has completed. If the method throws an exception during the invocation the task will continue.
            </remarks>
        </member>
        <member name="M:Mimick.ScheduledAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ScheduledAttribute"/> class.
            </summary>
            <param name="milliseconds">The interval between executions in milliseconds.</param>
        </member>
        <member name="P:Mimick.ScheduledAttribute.FixedInterval">
            <summary>
            Gets the interval between method invocations.
            </summary>
        </member>
        <member name="T:Mimick.SuppressAttribute">
            <summary>
            Indicates that the associated method should suppress exceptions when raised. The default behaviour is to ignore all exceptions,
            however specific exceptions can be ignored by configuring the <see cref="P:Mimick.SuppressAttribute.Types"/> property. If a method suppresses
            an exception and expects to return a value, the default value of the return type is produced.
            </summary>
        </member>
        <member name="M:Mimick.SuppressAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.SuppressAttribute" /> class.
            </summary>
        </member>
        <member name="P:Mimick.SuppressAttribute.Types">
            <summary>
            Gets or sets the optional collection of exception types.
            </summary>
        </member>
        <member name="M:Mimick.SuppressAttribute.OnEnter(Mimick.Aspect.MethodInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.SuppressAttribute.OnException(Mimick.Aspect.MethodInterceptionArgs,System.Exception)">
            <summary>
            Called when a method has been invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.SuppressAttribute.OnExit(Mimick.Aspect.MethodInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="T:Mimick.ValueAttribute">
            <summary>
            Indicates that the associated field, property, or parameter should be populated from a value matching the provided descriptor.
            </summary>
            <remarks>
            The value can be anything ranging from: a basic, constant value ("text", "1234"); a complex value which is computed during runtime
            when the value is resolved ("2 * 3 * 4", "'Test ' + 1"); or a value which contains a configuration which must be resolved ("{my.configuration}")
            </remarks>
        </member>
        <member name="M:Mimick.ValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ValueAttribute" /> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="P:Mimick.ValueAttribute.Pattern">
            <summary>
            Gets the pattern of the value.
            </summary>
        </member>
        <member name="M:Mimick.ValueAttribute.OnEnter(Mimick.Aspect.ParameterInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes before the method body and method interceptors.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.ValueAttribute.OnException(Mimick.Aspect.PropertyInterceptionArgs,System.Exception)">
            <summary>
            Called when a property <c>get</c> method is invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.ValueAttribute.OnExit(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>get</c> method is intercepted and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.ValueAttribute.OnGet(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>get</c> method is intercepted and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
            <remarks>
            If the property has a generated backing field, the value of the field will be loaded into the
            <see cref="P:Mimick.Aspect.PropertyInterceptionArgs.Value" /> property. If the value of this property is changed
            during the interception, the updated value will be copied into the backing field.
            </remarks>
        </member>
        <member name="M:Mimick.ValueAttribute.Resolve(System.Type)">
            <summary>
            Resolves the value of the field, property or parameter.
            </summary>
            <param name="type">The type of the storage.</param>
            <returns></returns>
        </member>
        <member name="T:Mimick.WriterAttribute">
            <summary>
            Indicates that the associated method should be invoked concurrently, requiring a write lock when the method is entered.
            </summary>
        </member>
        <member name="P:Mimick.WriterAttribute.Mimick#IRequireSynchronization#SynchronizationContext">
            <summary>
            Gets or sets the synchronization context used for concurrent read and write locks.
            </summary>
        </member>
        <member name="P:Mimick.WriterAttribute.Mimick#Aspect#IInstanceAware#Instance">
            <summary>
            Gets or sets the object instance which the attribute is associated with.
            </summary>
        </member>
        <member name="M:Mimick.WriterAttribute.GetSynchronizationLock">
            <summary>
            Gets the lock mechanism used when synchronizing.
            </summary>
            <returns>A <see cref="T:System.Threading.ReaderWriterLockSlim"/> value.</returns>
        </member>
        <member name="M:Mimick.WriterAttribute.Initialize">
            <summary>
            Initialize the attribute.
            </summary>
        </member>
        <member name="M:Mimick.WriterAttribute.OnEnter(Mimick.Aspect.MethodInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.WriterAttribute.OnException(Mimick.Aspect.MethodInterceptionArgs,System.Exception)">
            <summary>
            Called when a method has been invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.WriterAttribute.OnException(Mimick.Aspect.PropertyInterceptionArgs,System.Exception)">
            <summary>
            Called when a property <c>set</c> method is invoked and has produced an unhandled exception.
            </summary>
            <param name="e">The interception event arguments.</param>
            <param name="ex">The intercepted exception.</param>
        </member>
        <member name="M:Mimick.WriterAttribute.OnExit(Mimick.Aspect.MethodInterceptionArgs)">
            <summary>
            Called when a method has been invoked, and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.WriterAttribute.OnExit(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes after the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
        </member>
        <member name="M:Mimick.WriterAttribute.OnSet(Mimick.Aspect.PropertyInterceptionArgs)">
            <summary>
            Called when a property <c>set</c> method is intercepted and executes before the method body.
            </summary>
            <param name="e">The interception event arguments.</param>
            <remarks>
            The value of the <see cref="P:Mimick.Aspect.PropertyInterceptionArgs.Value" /> property will be populated with the
            updated value which has been assigned during the set operation.
            </remarks>
        </member>
        <member name="T:Mimick.Configurations.FactoryConfigurationSource">
            <summary>
            A configured source class which loads values using a factory.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.FactoryConfigurationSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.FactoryConfigurationSource.Load">
            <summary>
            Called when the configuration source has been requested and must prepare for resolution.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.FactoryConfigurationSource.Refresh">
            <summary>
            Called when the configuration source must be refreshed and all existing values reloaded into memory.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.FactoryConfigurationSource.Resolve(System.String)">
            <summary>
            Resolve the value of a configuration with the provided name.
            </summary>
            <param name="name">The configuration name.</param>
            <returns>
            The configuration value; otherwise, <c>null</c> if the configuration could not be found.
            </returns>
        </member>
        <member name="M:Mimick.Configurations.FactoryConfigurationSource.TryResolve(System.String,System.String@)">
            <summary>
            Attempt to resolve the value of a configuration with the provided name, and return whether it was resolved successfully.
            </summary>
            <param name="name">The configuration name.</param>
            <param name="value">The configuration value.</param>
            <returns>
              <c>true</c> if the configuration is resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Mimick.Configurations.KeyValueConfigurationSource">
            <summary>
            A configuration source class which loads values directly from an <see cref="T:System.Collections.Generic.IDictionary`2"/> source.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.KeyValueConfigurationSource.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Configurations.KeyValueConfigurationSource"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Mimick.Configurations.KeyValueConfigurationSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.KeyValueConfigurationSource.Load">
            <summary>
            Called when the configuration source has been requested and must prepare for resolution.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.KeyValueConfigurationSource.Refresh">
            <summary>
            Called when the configuration source must be refreshed and all existing values reloaded into memory.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.KeyValueConfigurationSource.Resolve(System.String)">
            <summary>
            Resolve the value of a configuration with the provided name.
            </summary>
            <param name="name">The configuration name.</param>
            <returns>
            The configuration value; otherwise, <c>null</c> if the configuration could not be found.
            </returns>
        </member>
        <member name="M:Mimick.Configurations.KeyValueConfigurationSource.TryResolve(System.String,System.String@)">
            <summary>
            Attempt to resolve the value of a configuration with the provided name, and return whether it was resolved successfully.
            </summary>
            <param name="name">The configuration name.</param>
            <param name="value">The configuration value.</param>
            <returns>
              <c>true</c> if the configuration is resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Mimick.Configurations.ProviderConfigurationSource">
            <summary>
            A configuration source class which is used internally to retrieve values from configuration classes which have been
            decorated with the <see cref="T:Mimick.ProvideAttribute"/> decoration.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.ProviderConfigurationSource.CreateProviderHandler(System.Reflection.MethodInfo)">
            <summary>
            Creates a provider handler delegate method for the provided method.
            </summary>
            <param name="method">The method.</param>
            <returns>A provider handler delegate.</returns>
        </member>
        <member name="M:Mimick.Configurations.ProviderConfigurationSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.ProviderConfigurationSource.Load">
            <summary>
            Called when the configuration source has been requested and must prepare for resolution.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.ProviderConfigurationSource.Refresh">
            <summary>
            Called when the configuration source must be refreshed and all existing values reloaded into memory.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.ProviderConfigurationSource.Resolve(System.String)">
            <summary>
            Resolve the value of a configuration with the provided name.
            </summary>
            <param name="name">The configuration name.</param>
            <returns>
            The configuration value; otherwise, <c>null</c> if the configuration could not be found.
            </returns>
        </member>
        <member name="M:Mimick.Configurations.ProviderConfigurationSource.TryResolve(System.String,System.String@)">
            <summary>
            Attempt to resolve the value of a configuration with the provided name, and return whether it was resolved successfully.
            </summary>
            <param name="name">The configuration name.</param>
            <param name="value">The configuration value.</param>
            <returns>
              <c>true</c> if the configuration is resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Mimick.Configurations.ProviderConfigurationSource.ProviderHandler">
            <summary>
            A delegate method representing a handler which collects a configuration value from a provider.
            </summary>
            <param name="instance">The configuration class object instance.</param>
            <returns>The configuration value.</returns>
        </member>
        <member name="T:Mimick.Configurations.XmlConfigurationSource">
            <summary>
            A configuration source class which loads values from an XML document.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.XmlConfigurationSource.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Configurations.XmlConfigurationSource"/> class.
            </summary>
            <param name="doc">The document.</param>
        </member>
        <member name="M:Mimick.Configurations.XmlConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Configurations.XmlConfigurationSource"/> class.
            </summary>
            <param name="filename">The full path to the document.</param>
        </member>
        <member name="M:Mimick.Configurations.XmlConfigurationSource.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Configurations.XmlConfigurationSource"/> class.
            </summary>
            <param name="src">The source.</param>
        </member>
        <member name="M:Mimick.Configurations.XmlConfigurationSource.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Mimick.Configurations.XmlConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.XmlConfigurationSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.XmlConfigurationSource.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Mimick.Configurations.XmlConfigurationSource.Load">
            <summary>
            Called when the configuration source has been requested and must prepare for resolution.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.XmlConfigurationSource.Refresh">
            <summary>
            Called when the configuration source must be refreshed and all existing values reloaded into memory.
            </summary>
        </member>
        <member name="M:Mimick.Configurations.XmlConfigurationSource.Resolve(System.String)">
            <summary>
            Resolve the value of a configuration with the provided name.
            </summary>
            <param name="name">The configuration name.</param>
            <returns>
            The configuration value; otherwise, <c>null</c> if the configuration could not be found.
            </returns>
        </member>
        <member name="M:Mimick.Configurations.XmlConfigurationSource.TryResolve(System.String,System.String@)">
            <summary>
            Attempt to resolve the value of a configuration with the provided name, and return whether it was resolved successfully.
            </summary>
            <param name="name">The configuration name.</param>
            <param name="value">The configuration value.</param>
            <returns>
              <c>true</c> if the configuration is resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Mimick.Configurations.XmlConfigurationSource.XmlSource">
            <summary>
            Indicates the source of an XML configuration source.
            </summary>
        </member>
        <member name="F:Mimick.Configurations.XmlConfigurationSource.XmlSource.Document">
            <summary>
            The configuration source was provided a concrete XML document.
            </summary>
        </member>
        <member name="F:Mimick.Configurations.XmlConfigurationSource.XmlSource.File">
            <summary>
            The configuration source was provided a file path.
            </summary>
        </member>
        <member name="F:Mimick.Configurations.XmlConfigurationSource.XmlSource.Stream">
            <summary>
            The configuration source was provided a stream.
            </summary>
        </member>
        <member name="T:Mimick.Cache`2">
            <summary>
            A cache class implementation of the <see cref="T:Mimick.ICache`2"/> interface.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:Mimick.Cache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Cache`2" /> class.
            </summary>
        </member>
        <member name="P:Mimick.Cache`2.Item(`0)">
            <summary>
            Gets or sets the <typeparamref name="TValue"/> with the specified key.
            </summary>
            <value>
            The <typeparamref name="TValue"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Mimick.Cache`2.Count">
            <summary>
            Gets the number of entries within the cache.
            </summary>
        </member>
        <member name="P:Mimick.Cache`2.MaximumCount">
            <summary>
            Gets or sets the maximum number of entries which can exist within the cache. If the maximum count is reached,
            the oldest records in the cache will be removed.
            </summary>
        </member>
        <member name="P:Mimick.Cache`2.MaximumTime">
            <summary>
            Gets or sets the maximum amount of time that a value within the cache should persist. If this value is
            <see cref="F:System.TimeSpan.MaxValue" /> then the values will persist until the end of the application.
            </summary>
        </member>
        <member name="M:Mimick.Cache`2.Add(`0,`1)">
            <summary>
            Adds a value to the cache with the provided key. If an entry already exists for the provided key, the value
            is updated to the latest and the entry time is updated.
            </summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value.</param>
        </member>
        <member name="M:Mimick.Cache`2.AddInternal(`0,`1)">
            <summary>
            Adds or updates an entry value within the cache for the provided key and value.
            </summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value.</param>
        </member>
        <member name="M:Mimick.Cache`2.EnsureInCapacity(System.Int32)">
            <summary>
            Ensures that the cache has enough capacity remaining for the provided number of elements.
            </summary>
        </member>
        <member name="M:Mimick.Cache`2.Clear">
            <summary>
            Clears all entries from the cache.
            </summary>
        </member>
        <member name="M:Mimick.Cache`2.Get(`0)">
            <summary>
            Gets a value from the cache with the provided key.
            </summary>
            <param name="key">The entry key.</param>
            <returns>
            The cache entry value; otherwise, the default value of <typeparamref name="TValue" />.
            </returns>
        </member>
        <member name="M:Mimick.Cache`2.GetInternal(`0)">
            <summary>
            Gets a value from the cache with the provided key, and performs any necessary invalidation of the record based on the timeout.
            </summary>
            <param name="key">The entry key.</param>
            <returns>An entry value; otherwise, the default value of <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:Mimick.Cache`2.Remove(`0)">
            <summary>
            Removes an entry from the cache with the proivded key.
            </summary>
            <param name="key">The entry key.</param>
        </member>
        <member name="M:Mimick.Cache`2.RemoveInternal(`0)">
            <summary>
            Removes an entry value from within the cache for a provided key.
            </summary>
            <param name="key">The entry key.</param>
        </member>
        <member name="M:Mimick.Cache`2.TryGet(`0,`1@)">
            <summary>
            Gets a value from the cache with the provided key, and returns whether the value was retrieved successfully.
            </summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value target.</param>
            <returns>
              <c>true</c> if the value was retrieved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Mimick.Cache`2.CacheEntry">
            <summary>
            A class representing an entry within the cache, containing information on the value.
            </summary>
        </member>
        <member name="T:Mimick.Cache`2.CacheTime">
            <summary>
            A class representing an entry within the cache time store, containing information on a record.
            </summary>
        </member>
        <member name="M:Mimick.Cache`2.CacheTime.CompareTo(Mimick.Cache{`0,`1}.CacheTime)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Mimick.Cache`2.CacheTime.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mimick.Cache`2.CacheTime.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Mimick.Contract">
            <summary>
            A class containing methods for validating objects and values.
            </summary>
        </member>
        <member name="M:Mimick.Contract.Equal``1(``0,``0,System.String)">
            <summary>
            Ensures that a provided value must be equal to a provided expected value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="expected">The value to compare to.</param>
            <param name="arg">The optional argument name.</param>
            <returns>The value.</returns>
            <exception cref="T:Mimick.InvalidValueException">If the value is not equal.</exception>
        </member>
        <member name="M:Mimick.Contract.GreaterThan``1(``0,``0,System.String)">
            <summary>
            Ensures that a provided value must be greater than a provided minimum.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The comparable value.</param>
            <param name="minimum">The minimum value.</param>
            <param name="arg">The optional argument name.</param>
            <returns>The value.</returns>
            <exception cref="T:Mimick.InvalidValueException">If the value is not greater than the minimum.</exception>
        </member>
        <member name="M:Mimick.Contract.GreaterThanEqual``1(``0,``0,System.String)">
            <summary>
            Ensures that a provided value must be greater than or equal to a provided minimum.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The comparable value.</param>
            <param name="minimum">The minimum value.</param>
            <param name="arg">The optional argument name.</param>
            <returns>The value.</returns>
            <exception cref="T:Mimick.InvalidValueException">If the value is not greater than or equal to the minimum.</exception>
        </member>
        <member name="M:Mimick.Contract.LessThan``1(``0,``0,System.String)">
            <summary>
            Ensures that a provided value must be less than a provided maximum.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The comparable value.</param>
            <param name="maximum">The minimum value.</param>
            <param name="arg">The optional argument name.</param>
            <returns>The value.</returns>
            <exception cref="T:Mimick.InvalidValueException">If the value is not less than the maximum.</exception>
        </member>
        <member name="M:Mimick.Contract.LessThanEqual``1(``0,``0,System.String)">
            <summary>
            Ensures that a provided value must be less than or equal to a provided maximum.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The comparable value.</param>
            <param name="maximum">The minimum value.</param>
            <param name="arg">The optional argument name.</param>
            <returns>The value.</returns>
            <exception cref="T:Mimick.InvalidValueException">If the value is not less than or equal to the maximum.</exception>
        </member>
        <member name="M:Mimick.Contract.NotBlank(System.String,System.String)">
            <summary>
            Ensures that a provided string cannot be <c>null</c>, blank or consist of only whitespaces.
            </summary>
            <param name="str">The string.</param>
            <param name="arg">The optional argument name.</param>
            <returns>The string.</returns>
            <exception cref="T:Mimick.EmptyException">If the string is <c>null</c>, empty or contain only whitespaces.</exception>
        </member>
        <member name="M:Mimick.Contract.NotBlank(System.Text.StringBuilder,System.String)">
            <summary>
            Ensures that a provided string builder cannot be <c>null</c>, blank or consist of only whitespaces.
            </summary>
            <param name="builder">The string builder.</param>
            <param name="arg">The optional argument name.</param>
            <returns>The string builder.</returns>
            <exception cref="T:Mimick.EmptyException">If the string builder is <c>null</c>, empty or contain only whitespaces.</exception>
        </member>
        <member name="M:Mimick.Contract.NotEmpty``1(``0[],System.String)">
            <summary>
            Ensures that a provided array cannot be <c>null</c> or empty.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array.</param>
            <param name="arg">The optional argument name.</param>
            <returns>The array.</returns>
            <exception cref="T:Mimick.EmptyException">If the array is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Mimick.Contract.NotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Ensures that a provided collection cannot be <c>null</c> or empty.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="collection">The object.</param>
            <param name="arg">The optional argument name.</param>
            <returns>The object.</returns>
            <exception cref="T:Mimick.EmptyException">If the object is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Mimick.Contract.NotEmpty(System.String,System.String)">
            <summary>
            Ensures that a provided string cannot be <c>null</c> or empty.
            </summary>
            <param name="str">The string.</param>
            <param name="arg">The optional argument name.</param>
            <returns>The string.</returns>
            <exception cref="T:Mimick.EmptyException">If the string is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Mimick.Contract.NotEmpty(System.Text.StringBuilder,System.String)">
            <summary>
            Ensures that a provided string builder cannot be <c>null</c> or empty.
            </summary>
            <param name="builder">The string builder.</param>
            <param name="arg">The optional argument name.</param>
            <returns>The string builder.</returns>
            <exception cref="T:Mimick.EmptyException">If the string builder is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Mimick.Contract.NotEqual``1(``0,``0,System.String)">
            <summary>
            Ensures that a provided value must not be equal to a provided comparison value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="compare">The comparison value.</param>
            <param name="arg">The optional argument name.</param>
            <returns>The value.</returns>
            <exception cref="T:Mimick.InvalidValueException">If the value is equal to the comparison value.</exception>
        </member>
        <member name="M:Mimick.Contract.NotNull``1(``0)">
            <summary>
            Ensures that a provided object cannot be <b>null</b>.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="o">The object.</param>
            <returns>The object.</returns>
            <exception cref="T:System.NullReferenceException">If the object is <c>null</c>.</exception>
        </member>
        <member name="M:Mimick.Contract.NotNull``1(``0,System.String)">
            <summary>
            Ensures that a provided argument object cannot be <c>null</c>.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="o">The object.</param>
            <param name="name">The argument name.</param>
            <returns>The object.</returns>
            <exception cref="T:System.ArgumentNullException">If the argument object is <c>null</c>.</exception>
        </member>
        <member name="T:Mimick.Freezable">
            <summary>
            A class containing methods for freezing objects, and checking whether objects are frozen.
            </summary>
        </member>
        <member name="M:Mimick.Freezable.GetFreezable(System.Object)">
            <summary>
            Gets an <see cref="T:Mimick.IFreezable"/> reference from a provided target object.
            </summary>
            <param name="target">The target object.</param>
            <returns>An <see cref="T:Mimick.IFreezable"/> value.</returns>
            <exception cref="T:System.ArgumentNullException">If the target object is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the target object is not a freezable type.</exception>
        </member>
        <member name="M:Mimick.Freezable.Freeze(System.Object)">
            <summary>
            Freeze a provided object.
            </summary>
            <param name="target">The target object.</param>
            <exception cref="T:System.ArgumentNullException">If the target object is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the target object is not a freezable type.</exception>
            <exception cref="T:Mimick.FrozenException">If the target object has already been frozen.</exception>
        </member>
        <member name="M:Mimick.Freezable.IsFrozen(System.Object)">
            <summary>
            Gets whether a provided object has been frozen.
            </summary>
            <param name="target">The target object.</param>
            <returns><c>true</c> if the object has been frozen; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If the target object is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the target object is not a freezable type.</exception>
        </member>
        <member name="T:Mimick.ReadOnlyList`1">
            <summary>
            A class representing a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> implementation. A read-only list copies the elements from
            a source collection to ensure that the collection is immutable.
            </summary>
            <typeparam name="T">The type of the elements in the list.</typeparam>
        </member>
        <member name="M:Mimick.ReadOnlyList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ReadOnlyList`1"/> class.
            </summary>
        </member>
        <member name="M:Mimick.ReadOnlyList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ReadOnlyList`1"/> class.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="P:Mimick.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <value>
            The value.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Mimick.ReadOnlyList`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="M:Mimick.ReadOnlyList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Mimick.ReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Mimick.ReadWriteDictionary`2">
            <summary>
            A class representing a dictionary with internal read and write lock support.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:Mimick.ReadWriteDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ReadWriteDictionary`2" /> class.
            </summary>
        </member>
        <member name="P:Mimick.ReadWriteDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <typeparamref name="TValue"/> with the specified key.
            </summary>
            <value>
            The <typeparamref name="TValue"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Mimick.ReadWriteDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Mimick.ReadWriteDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:Mimick.ReadWriteDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="P:Mimick.ReadWriteDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="M:Mimick.ReadWriteDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Mimick.ReadWriteDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Mimick.ReadWriteDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Mimick.ReadWriteDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <returns>
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Mimick.ReadWriteDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Mimick.ReadWriteDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Mimick.ReadWriteDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
              <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.  This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="M:Mimick.ReadWriteDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
              <see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Mimick.ReadWriteDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
              <see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Mimick.ReadWriteDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Mimick.ReadWriteList`1">
            <summary>
            A class representing a <see cref="T:System.Collections.Generic.List`1"/> with internal read and write lock support.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="M:Mimick.ReadWriteList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ReadWriteList`1"/> class.
            </summary>
        </member>
        <member name="M:Mimick.ReadWriteList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ReadWriteList`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Mimick.ReadWriteList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ReadWriteList`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:Mimick.ReadWriteList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <typeparamref name="T"/> at the specified index.
            </summary>
            <value>
            The <typeparamref name="T"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Mimick.ReadWriteList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Mimick.ReadWriteList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:Mimick.ReadWriteList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Mimick.ReadWriteList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Mimick.ReadWriteList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Mimick.ReadWriteList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Mimick.ReadWriteList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Mimick.ReadWriteList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Mimick.ReadWriteList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:Mimick.ReadWriteList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Mimick.ReadWriteList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Mimick.ReadWriteList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Mimick.Designers.AdhocDesigner">
            <summary>
            A component designer class which instantiates new instances of a component for each resolution.
            </summary>
        </member>
        <member name="M:Mimick.Designers.AdhocDesigner.#ctor(System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Designers.AdhocDesigner"/> class.
            </summary>
            <param name="ctor">The ctor.</param>
        </member>
        <member name="P:Mimick.Designers.AdhocDesigner.IsDisposable">
            <summary>
            Gets whether the component designer can be disposed.
            </summary>
        </member>
        <member name="M:Mimick.Designers.AdhocDesigner.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Designers.AdhocDesigner.GetComponent">
            <summary>
            Gets a component instance from the designer.
            </summary>
            <returns>
            The component instance.
            </returns>
        </member>
        <member name="T:Mimick.Designers.InstancedDesigner">
            <summary>
            A component designer class which holds a reference to an instance of a component.
            </summary>
        </member>
        <member name="M:Mimick.Designers.InstancedDesigner.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Designers.InstancedDesigner"/> class.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:Mimick.Designers.InstancedDesigner.IsDisposable">
            <summary>
            Gets whether the component designer can be disposed.
            </summary>
        </member>
        <member name="M:Mimick.Designers.InstancedDesigner.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Designers.InstancedDesigner.GetComponent">
            <summary>
            Gets a component instance from the designer.
            </summary>
            <returns>
            The component instance.
            </returns>
        </member>
        <member name="T:Mimick.Designers.SingletonDesigner">
            <summary>
            A component designer class which creates and maintains a single instance of a component.
            </summary>
        </member>
        <member name="M:Mimick.Designers.SingletonDesigner.#ctor(System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Designers.SingletonDesigner"/> class.
            </summary>
            <param name="ctor">The ctor.</param>
        </member>
        <member name="P:Mimick.Designers.SingletonDesigner.IsDisposable">
            <summary>
            Gets whether the component designer can be disposed.
            </summary>
        </member>
        <member name="M:Mimick.Designers.SingletonDesigner.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Designers.SingletonDesigner.GetComponent">
            <summary>
            Gets a component instance from the designer.
            </summary>
            <returns>
            The component instance.
            </returns>
        </member>
        <member name="T:Mimick.Designers.ThreadDesigner">
            <summary>
            A component designer class which creates and maintains single instances of components on a per-thread basis.
            </summary>
        </member>
        <member name="M:Mimick.Designers.ThreadDesigner.#ctor(System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Designers.ThreadDesigner"/> class.
            </summary>
            <param name="ctor">The ctor.</param>
        </member>
        <member name="P:Mimick.Designers.ThreadDesigner.IsDisposable">
            <summary>
            Gets whether the component designer can be disposed.
            </summary>
        </member>
        <member name="M:Mimick.Designers.ThreadDesigner.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Designers.ThreadDesigner.GetComponent">
            <summary>
            Gets a component instance from the designer.
            </summary>
            <returns>
            The component instance.
            </returns>
        </member>
        <member name="T:Mimick.EmptyException">
            <summary>
            Represents an error when a value should not be considered empty.
            </summary>
        </member>
        <member name="M:Mimick.EmptyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.EmptyException" /> class.
            </summary>
        </member>
        <member name="M:Mimick.EmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.EmptyException"/> class.
            </summary>
            <param name="paramName">The name of the parameter.</param>
        </member>
        <member name="P:Mimick.EmptyException.ParamName">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="T:Mimick.InvalidValueException">
            <summary>
            Represents an error when a value is not within a required range or satisfies a specific condition.
            </summary>
        </member>
        <member name="M:Mimick.InvalidValueException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.InvalidValueException" /> class.
            </summary>
        </member>
        <member name="M:Mimick.InvalidValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.InvalidValueException" /> class.
            </summary>
            <param name="paramName">The name of the parameter.</param>
        </member>
        <member name="P:Mimick.InvalidValueException.ParamName">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="T:Mimick.Extensions">
            <summary>
            A class containing extension methods for common array operations.
            </summary>
            <summary>
            A class containing extension methods for common collection operations.
            </summary>
            <summary>
            A class containing extension methods for common date operations.
            </summary>
            <summary>
            A class containing extension methods for common enum operations.
            </summary>
            <summary>
            A class containing extension methods for common enumeration operations.
            </summary>
            <summary>
            A class containing extension methods for common object operations.
            </summary>
            <summary>
            A class containing extension methods for common string operations.
            </summary>
        </member>
        <member name="M:Mimick.Extensions.Copy``1(``0[])">
            <summary>
            Create a copy of the array.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array.</param>
            <returns>The new array instance containing the copied values.</returns>
        </member>
        <member name="M:Mimick.Extensions.Copy``1(``0[],System.Int32)">
            <summary>
            Create a copy of the array.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array.</param>
            <param name="index">The zero-based array index to begin copying from.</param>
            <returns>The new array instance containing the copied values.</returns>
        </member>
        <member name="M:Mimick.Extensions.Copy``1(``0[],System.Int32,System.Int32)">
            <summary>
            Create a copy of the array.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array.</param>
            <param name="index">The zero-based array index to begin copying from.</param>
            <param name="count">The number of elements to copy.</param>
            <returns>The new array instance containing the copied values.</returns>
        </member>
        <member name="M:Mimick.Extensions.Fill``1(``0[],``0)">
            <summary>
            Fills all elements of the array with the provided value.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array.</param>
            <param name="value">The array fill value.</param>
        </member>
        <member name="M:Mimick.Extensions.Fill``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Fills all elements of the array with the provided value.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array.</param>
            <param name="value">The array fill value.</param>
            <param name="index">The zero-based array index to begin filling from.</param>
            <param name="count">The number of elements to fill.</param>
        </member>
        <member name="M:Mimick.Extensions.Slice``1(``0[],System.Int32)">
            <summary>
            Slices the array at the provided index, returning a new array containing the sliced elements.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array.</param>
            <param name="index">The zero-based index of the array to slice from.</param>
            <returns>A new array containing the sliced elements.</returns>
        </member>
        <member name="M:Mimick.Extensions.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
            Slices the array at the provided index, returning a new array containing the sliced elements.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="array">The array.</param>
            <param name="index">The zero-based index of the array to slice from.</param>
            <param name="count">The number of elements to slice.</param>
            <returns>A new array containing the sliced elements.</returns>
        </member>
        <member name="M:Mimick.Extensions.AddIfMissing``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to the collection if the item does not exist already.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="collection">The collection.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Mimick.Extensions.AddIfMissing``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds an item to the collection if the key does not exist already.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="dictionary">The collection.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mimick.Extensions.ContainsAll``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Gets whether the collection contains all of the provided values.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="collection">The collection.</param>
            <param name="values">The values.</param>
            <returns><c>true</c> if the collection contains all values; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.ContainsAny``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Gets whether the collection contains any of the provided values.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="collection">The collection.</param>
            <param name="values">The values.</param>
            <returns><c>true</c> if the collection contains any values; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Gets whether the collection is <c>null</c> or contains no values.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="collection">The collection.</param>
            <returns><c>true</c> if the collection is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.IsNotEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Gets whether the collection is not <c>null</c> and contains values.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="collection">The collection.</param>
            <returns><c>true</c> if the collection is not empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes a collection of values from the collection.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="collection">The collection.</param>
            <param name="values">The values to remove.</param>
        </member>
        <member name="M:Mimick.Extensions.IsFuture(System.DateTime)">
            <summary>
            Gets whether the date is set in the future.
            </summary>
            <param name="date">The date.</param>
            <returns><c>true</c> if the date is set in the future; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.IsPast(System.DateTime)">
            <summary>
            Gets whether the date is set in the past.
            </summary>
            <param name="date">The date.</param>
            <returns><c>true</c> if the date is set in the past; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.GetDescription(System.Enum)">
            <summary>
            Gets a description for the enumerator value based on a <see cref="T:System.ComponentModel.DescriptionAttribute"/> associated with the enum.
            </summary>
            <param name="value">The enumerator value.</param>
            <returns>The description value associated with the enumerator value; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.Count(System.Collections.IEnumerable)">
            <summary>
            Counts the number of elements in a non-generic enumerable collection.
            </summary>
            <param name="enumerable">The enumerable collection.</param>
            <returns>The number of elements in the collection.</returns>
        </member>
        <member name="M:Mimick.Extensions.Exists``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters the enumerable collection by values which are not <c>null</c>.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="enumerable">The enumerable collection.</param>
            <returns>The enumerable collection.</returns>
        </member>
        <member name="M:Mimick.Extensions.ToReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the enumerable collection to an immutable read-only list.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="enumerable">The enumerable collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> value.</returns>
        </member>
        <member name="M:Mimick.Extensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Joins the content of an enumerable collection into a <see cref="T:System.String"/> value using the provided delimiter.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="enumerable">The enumerable collection.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>The resulting string value.</returns>
        </member>
        <member name="M:Mimick.Extensions.IfNotNull(System.Object,System.Action)">
            <summary>
            Invokes an action if the object value is not <c>null</c>.
            </summary>
            <param name="o">The object to check.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:Mimick.Extensions.IfNotNull``1(System.Object,System.Func{``0})">
            <summary>
            Invokes an action if the object value is not <c>null</c>.
            </summary>
            <typeparam name="T">The type returned from the action.</typeparam>
            <param name="o">The object to check.</param>
            <param name="action">The action to invoke.</param>
            <returns>The result of the action if the value is <c>null</c>; otherwise, the default value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Mimick.Extensions.IfNull(System.Object,System.Action)">
            <summary>
            Invokes an action if the object value is <c>null</c>.
            </summary>
            <param name="o">The object to check.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:Mimick.Extensions.IfNull``1(System.Object,System.Func{``0})">
            <summary>
            Invokes an action if the object value is <c>null</c>.
            </summary>
            <typeparam name="T">The type returned from the action.</typeparam>
            <param name="o">The object to check.</param>
            <param name="action">The action to invoke.</param>
            <returns>The result of the action if the value is <c>null</c>; otherwise, the default value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Mimick.Extensions.IsNotNull(System.Object)">
            <summary>
            Gets whether the object value is not <c>null</c>.
            </summary>
            <param name="o">The object to check.</param>
            <returns><c>true</c> if the object is not <c>null</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.IsNull(System.Object)">
            <summary>
            Gets whether the object value is <c>null</c>.
            </summary>
            <param name="o">The object to check.</param>
            <returns><c>true</c> if the object is <c>null</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.IsAny(System.String,System.String[])">
            <summary>
            Gets whether the current value matches any of the provided comparison values.
            </summary>
            <param name="value">The value.</param>
            <param name="values">The values to compare against the current value.</param>
            <returns><c>true</c> if the value matches one of the comparison values; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.IsAny(System.String,System.StringComparison,System.String[])">
            <summary>
            Gets whether the current value matches any of the provided comparison values.
            </summary>
            <param name="value">The value.</param>
            <param name="comparison">The comparison mode to use.</param>
            <param name="values">The values to compare against the current value.</param>
            <returns><c>true</c> if the value matches one of the comparison values; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.IsBlank(System.String)">
            <summary>
            Gets whether the value is <c>null</c> or contains only whitespaces.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value is <c>null</c> or contains only whitespaces; otherwise, <c>false</c>/</returns>
        </member>
        <member name="M:Mimick.Extensions.IsEmpty(System.String)">
            <summary>
            Gets whether the value is <c>null</c> or contains no characters.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value is <c>null</c> or contains no characters; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.IsNotBlank(System.String)">
            <summary>
            Gets whether the value is not <c>null</c> and does not contain only whitespaces.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value is not <c>null</c> and does not contain only whitespaces; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.IsNotEmpty(System.String)">
            <summary>
            Gets whether the value is not <c>null</c> and contains at-least one character.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value is not <c>null</c> and contains at-least one character; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Extensions.IsNumeric(System.String)">
            <summary>
            Gets whether the value is not <c>null</c> and contains a numeric value. 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mimick.Extensions.Left(System.String,System.Int32)">
            <summary>
            Retrieves a substring of the current value from the start of the string.
            </summary>
            <param name="value">The value.</param>
            <param name="length">The length of the substring.</param>
            <returns>The substring of the current value.</returns>
        </member>
        <member name="M:Mimick.Extensions.Repeat(System.String,System.Int32)">
            <summary>
            Repeats the value a provided number of times.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The count of the number of times the value should repeat.</param>
            <returns>A value containing the repeated values.</returns>
        </member>
        <member name="M:Mimick.Extensions.Right(System.String,System.Int32)">
            <summary>
            Retrieves a substring of the current value from the end of the string.
            </summary>
            <param name="value">The value.</param>
            <param name="length">The length of the substring.</param>
            <returns>The substring of the current value.</returns>
        </member>
        <member name="M:Mimick.Extensions.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
            Converts the current value into a byte array.
            </summary>
            <param name="value">The value.</param>
            <param name="encoding">The optional encoding to use.</param>
            <returns>A byte array value.</returns>
        </member>
        <member name="M:Mimick.Extensions.ToEnum``1(System.String)">
            <summary>
            Converts the current value into an enumerator value.
            </summary>
            <typeparam name="T">The type of the enumerator.</typeparam>
            <param name="value">The value.</param>
            <returns>An enumerator value matching a <typeparamref name="T"/> value.</returns>
        </member>
        <member name="M:Mimick.Extensions.ToFileInfo(System.String)">
            <summary>
            Converts the current value into a <see cref="T:System.IO.FileInfo"/> where the value represents the file path.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> value.</returns>
        </member>
        <member name="M:Mimick.Extensions.TrimToNull(System.String)">
            <summary>
            Trims the current value and returns <c>null</c> if the trimmed value is empty.
            </summary>
            <param name="value">The value.</param>
            <returns>The trimmed value; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:Mimick.Framework.ComponentContext">
            <summary>
            A class representing a default implementation of the component context.
            </summary>
        </member>
        <member name="F:Mimick.Framework.ComponentContext.AllInstanced">
            <summary>
            The binding flags used when determining members which provide components.
            </summary>
        </member>
        <member name="F:Mimick.Framework.ComponentContext.allEntries">
            <summary>
            The entries across all implementations.
            </summary>
        </member>
        <member name="F:Mimick.Framework.ComponentContext.configurationEntries">
            <summary>
            The entries which have the <see cref="T:Mimick.ConfigurationAttribute"/> decoration.
            </summary>
        </member>
        <member name="F:Mimick.Framework.ComponentContext.implementedEntries">
            <summary>
            The entries where one concrete type implements an interface type.
            </summary>
        </member>
        <member name="F:Mimick.Framework.ComponentContext.namedEntries">
            <summary>
            The entries where a concrete type has been provided one or more names.
            </summary>
        </member>
        <member name="F:Mimick.Framework.ComponentContext.typedEntries">
            <summary>
            The entries where a concrete type is mapped directly to the component.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Framework.ComponentContext" /> class.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Mimick.Framework.ComponentContext"/> class.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.CreateConstructor(System.Type)">
            <summary>
            Creates a constructor method which can be used to create a new instance of the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>A method used to create a new instance.</returns>
            <exception cref="T:System.MissingMethodException">If a default constructor cannot be found.</exception>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.GetImplementedTypes(System.Type)">
            <summary>
            Gets a collection of implemented type definitions for a provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>A <see cref="T:System.Type"/> array containing the results.</returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
              <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.GetAllComponents">
            <summary>
            Gets an immutable collection containing all components which were recognised by the context.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> containing the component descriptors.</returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.GetConfigurationComponents">
            <summary>
            Gets an immutable collection containing all configuration components which were recognised by the context. A component
            is considered a configuration if the class is decorated with the <see cref="T:Mimick.ConfigurationAttribute"/> class.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> containing the component descriptors.</returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Initialize">
            <summary>
            Initialize the component context by processing any types within the registered assemblies that have been
            decorated with the <see cref="T:Mimick.ConfigurationAttribute"/> decoration.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers all classes within the provided assembly which have been decorated with <see cref="T:Mimick.ComponentAttribute" />.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.RegisterAssembly``1">
            <summary>
            Registers all classes within an assembly containing the provided type, which have been decorated with <see cref="T:Mimick.ComponentAttribute" />.
            </summary>
            <typeparam name="T">The type of the target assembly.</typeparam>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Register``1">
            <summary>
            Register a provided type within the component provider using the default singleton lifetime.
            </summary>
            <typeparam name="TConcrete">The type.</typeparam>
            <returns>
            A configurator which can be used to further configure the component state.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Register``1(System.String[])">
            <summary>
            Register a provided type within the component provider using the default singleton lifetime.
            </summary>
            <typeparam name="TConcrete"></typeparam>
            <param name="names">An optional collection of identifiers which the components will be stored under.</param>
            <returns>
            A configurator which can be used to further configure the component state.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Register``2">
            <summary>
            Register a provided interface and concrete type within the component provider using the default singleton lifetime.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <typeparam name="TConcrete">The concrete type.</typeparam>
            <returns>
            A configurator which can be used to further configure the component state.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Register``2(System.String[])">
            <summary>
            Register a provided interface and concrete type within the component provider using the default singleton lifetime.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <typeparam name="TConcrete">The concrete type.</typeparam>
            <param name="names">An optional collection of identifiers which the components will be stored under.</param>
            <returns>
            A configurator which can be used to further configure the component state.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Register(System.Type)">
            <summary>
            Register a provided type within the component provider using the default singleton lifetime.
            </summary>
            <param name="type">The type.</param>
            <returns>
            A configurator which can be used to further configure the component state.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Register(System.Type,System.String[])">
            <summary>
            Register a provided type within the component provider using the default singleton lifetime.
            </summary>
            <param name="type">The type.</param>
            <param name="names">An optional collection of identifiers which the components will be stored under.</param>
            <returns>
            A configurator which can be used to further configure the component state.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Register(System.Type,System.Type)">
            <summary>
            Register a provided interface and concrete type within the component provider using the default singleton lifetime.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <param name="concreteType">The concrete type.</param>
            <returns>
            A configurator which can be used to further configure the component state.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Register(System.Type,System.Type,System.String[])">
            <summary>
            Register a provided interface and concrete type within the component provider using the default singleton lifetime.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <param name="concreteType">The concrete type.</param>
            <param name="names">An optional collection of identifiers which the components will be stored under.</param>
            <returns>
            A configurator which can be used to further configure the component state.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Register``1(System.Object)">
            <summary>
            Register a provided object instance within the component provider as an implementation of the provided
            interface type, using the default singleton lifetime.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="instance">The object instance.</param>
            <exception cref="T:System.ArgumentNullException">instance - The component instance cannot be null</exception>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Register(System.Object)">
            <summary>
            Register a provided object instance within the component provider using the default singleton lifetime.
            </summary>
            <param name="instance">The object instance.</param>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Register(System.Object,System.String[])">
            <summary>
            Register a provided object instance within the component provider using the default singleton lifetime.
            </summary>
            <param name="instance">The object instance.</param>
            <param name="names">An optional collection of identifiers which the components will be stored under.</param>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Resolve``1">
            <summary>
            Resolve a component of the provided type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>
            The resolved component instance.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Resolve``1(System.String)">
            <summary>
            Resolve a component of the provided type with the provided name.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="name">The component name.</param>
            <returns>
            The resolved component instance.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Resolve(System.String)">
            <summary>
            Resolve a component with the provided name.
            </summary>
            <param name="name">The component name.</param>
            <returns>
            The resolved component instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Resolve(System.Type)">
            <summary>
            Resolve a component of the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The resolve component instance.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ComponentContext.Resolve(System.Type,System.String)">
            <summary>
            Resolve a component of the provided type with the provided name.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The component name.</param>
            <returns>
            The resolve component instance.
            </returns>
        </member>
        <member name="T:Mimick.Framework.ComponentDescriptor">
            <summary>
            A class implementation of the component descriptor which manages information on a component of the framework.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ComponentDescriptor.#ctor(System.Type,System.Func{System.Object},System.Type[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Framework.ComponentDescriptor"/> class.
            </summary>
            <param name="type">The component type.</param>
            <param name="constructor">The constructor method used to instantiate the type.</param>
            <param name="interfaces">The interfaces implemented by the component type.</param>
            <param name="names">The names associated with the component.</param>
        </member>
        <member name="P:Mimick.Framework.ComponentDescriptor.Constructor">
            <summary>
            Gets the constructor method used to instantiate the component type.
            </summary>
        </member>
        <member name="P:Mimick.Framework.ComponentDescriptor.Designer">
            <summary>
            Gets the component designer which can be used to activate the component.
            </summary>
        </member>
        <member name="P:Mimick.Framework.ComponentDescriptor.Interfaces">
            <summary>
            Gets the optional collection of interfaces which have been implemented by the component type.
            </summary>
        </member>
        <member name="P:Mimick.Framework.ComponentDescriptor.Names">
            <summary>
            Gets the optional collection of names associated with the component.
            </summary>
        </member>
        <member name="P:Mimick.Framework.ComponentDescriptor.Type">
            <summary>
            Gets the type of the component.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ComponentDescriptor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Mimick.Framework.ComponentRegistration">
            <summary>
            A class providing options for configuring a component registration.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ComponentRegistration.#ctor(Mimick.Framework.ComponentDescriptor[])">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Framework.ComponentRegistration"/> class.
            </summary>
            <param name="components">The component descriptors.</param>
        </member>
        <member name="M:Mimick.Framework.ComponentRegistration.ToScope(Mimick.Scope)">
            <summary>
            Sets the scope of the component, which determines how the component should persist.
            </summary>
            <param name="scope">The scope.</param>
            <returns></returns>
        </member>
        <member name="T:Mimick.Framework.ConfigurationContext">
            <summary>
            A class representing the configuration context of the framework which maintains all configuration sources.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ConfigurationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Framework.ConfigurationContext" /> class.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ConfigurationContext.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Mimick.Framework.ConfigurationContext"/> class.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ConfigurationContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ConfigurationContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
              <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Mimick.Framework.ConfigurationContext.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ConfigurationContext.Register(Mimick.IConfigurationSource)">
            <summary>
            Register a configuration source within the configuration context.
            </summary>
            <param name="source">The configuration source.</param>
            <returns>
            A configurator which can be used to further configure the source.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ConfigurationContext.Register``1">
            <summary>
            Register a configuration source within the configuration context of the provided type. The configuration source must have a default constructor.
            </summary>
            <typeparam name="T">The type of the configuration source.</typeparam>
            <returns>
            A configurator which can be used to further configure the source.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ConfigurationContext.Resolve(System.String,System.String)">
            <summary>
            Resolves the value of a configuration from the configuration context with the provided name.
            </summary>
            <param name="name">The configuration name.</param>
            <param name="or">The value to return if the configuration could not be resolved.</param>
            <returns>
            The configuration value; otherwise, the value of <paramref name="or" />.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ConfigurationContext.Resolve(System.String,System.Type,System.Object)">
            <summary>
            Resolves the value of a configuration from the configuration context with the provided name,
            and attempts to automatically convert the value into the provided type.
            </summary>
            <param name="name">The configuration name.</param>
            <param name="type">The configuration type.</param>
            <param name="or">The value to return if the configuration could not be resolved.</param>
            <returns>
            The configuration value; otherwise, the value of <paramref name="or" />.
            </returns>
        </member>
        <member name="M:Mimick.Framework.ConfigurationContext.Resolve``1(System.String,``0)">
            <summary>
            Resolves the value of a configuration from the configuration context with the provided name,
            and attempts to automatically convert the value into the provided type.
            </summary>
            <typeparam name="T">The configuration type.</typeparam>
            <param name="name">The configuration name.</param>
            <param name="or">The value to return if the configuration could not be resolved.</param>
            <returns>
            The configuration value; otherwise, the value of <paramref name="or" />.
            </returns>
        </member>
        <member name="T:Mimick.Framework.ConfigurationDescriptor">
            <summary>
            A class implementation of the configuration descriptor which manages information on a configuration source of the framework.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ConfigurationDescriptor.#ctor(Mimick.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Framework.ConfigurationDescriptor"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Mimick.Framework.ConfigurationDescriptor.ExpiresAt">
            <summary>
            Gets the duration of time, from when the configuration source is loaded, to maintain the configuration source before issuing
            a <see cref="M:Mimick.IConfigurationSource.Refresh" /> invocation.
            </summary>
        </member>
        <member name="P:Mimick.Framework.ConfigurationDescriptor.LastUpdated">
            <summary>
            Gets or sets the time when the configuration was last updated.
            </summary>
        </member>
        <member name="P:Mimick.Framework.ConfigurationDescriptor.Source">
            <summary>
            Gets the configuration source.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ConfigurationDescriptor.IsUpdateRequired">
            <summary>
            Determines whether the configuration source needs to be reloaded after reaching the maximum expiry period.
            </summary>
            <returns><c>true</c> if the source must be updated; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Mimick.Framework.ConfigurationRegistration">
            <summary>
            A class providing options for configuring a configuration registration.
            </summary>
        </member>
        <member name="M:Mimick.Framework.ConfigurationRegistration.#ctor(Mimick.Framework.ConfigurationDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Framework.ConfigurationRegistration"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Mimick.Framework.ConfigurationRegistration.Expires(System.TimeSpan)">
            <summary>
            Sets the duration of time after which the configuration source must be reloaded into memory using the
            <see cref="M:Mimick.IConfigurationSource.Refresh" /> method. The expiration is set to <see cref="F:System.Threading.Timeout.Infinite" /> by default.
            </summary>
            <param name="duration">The duration of time.</param>
            <returns></returns>
        </member>
        <member name="T:Mimick.Framework.TaskContext">
            <summary>
            A class representing the task context of the framework which maintains timed and asynchronous tasks.
            </summary>
        </member>
        <member name="M:Mimick.Framework.TaskContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Framework.TaskContext" /> class.
            </summary>
        </member>
        <member name="M:Mimick.Framework.TaskContext.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Mimick.Framework.TaskContext"/> class.
            </summary>
        </member>
        <member name="P:Mimick.Framework.TaskContext.TimedTasks">
            <summary>
            Gets a collection of tasks which are configured to execute on intervals.
            </summary>
        </member>
        <member name="M:Mimick.Framework.TaskContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Framework.TaskContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Mimick.Framework.TaskContext.CreateTimedIntervalHandler(System.Reflection.MethodInfo)">
            <summary>
            Creates a timed interval execution handler for the provided method.
            </summary>
            <param name="method">The method.</param>
            <returns>A <see cref="T:Mimick.Tasks.IntervalExecutionHandler"/> delegate method.</returns>
        </member>
        <member name="M:Mimick.Framework.TaskContext.Initialize">
            <summary>
            Initialize the task context resulting in any timed tasks starting.
            </summary>
        </member>
        <member name="M:Mimick.Framework.TaskContext.Register(Mimick.ITimedInterval,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Registers a method invocation as a timed task within the context.
            </summary>
            <param name="interval">The interval between method executions.</param>
            <param name="method">The method which must execute.</param>
            <param name="instance">The object instance which the method must execute against.</param>
        </member>
        <member name="T:Mimick.FrameworkContext">
            <summary>
            A class representing the current framework context of the application, implemented as a singleton pattern.
            </summary>
        </member>
        <member name="F:Mimick.FrameworkContext.current">
            <summary>
            The singleton implementation which maintains the current framework context instance.
            </summary>
        </member>
        <member name="M:Mimick.FrameworkContext.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Mimick.FrameworkContext" /> class from being created.
            </summary>
        </member>
        <member name="M:Mimick.FrameworkContext.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Mimick.FrameworkContext"/> class.
            </summary>
        </member>
        <member name="P:Mimick.FrameworkContext.Current">
            <summary>
            Gets the current framework context associated with the application.
            </summary>
        </member>
        <member name="P:Mimick.FrameworkContext.ComponentContext">
            <summary>
            Gets the component context responsible for maintaining and resolving components.
            </summary>
        </member>
        <member name="P:Mimick.FrameworkContext.ConfigurationContext">
            <summary>
            Gets the configuration context responsible for maintaining and resolving configurations.
            </summary>
        </member>
        <member name="P:Mimick.FrameworkContext.TaskContext">
            <summary>
            Gets the task context responsible for maintaining timed and asynchronous tasks.
            </summary>
        </member>
        <member name="M:Mimick.FrameworkContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.FrameworkContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Mimick.FrameworkContext.Initialize">
            <summary>
            Initialize the framework context in preparation for usage. This method must be called before the framework can be used.
            </summary>
        </member>
        <member name="M:Mimick.FrameworkContext.SetComponentContext(Mimick.IComponentContext)">
            <summary>
            Update the framework context with a new component context manager, allowing for custom dependency container implementations.
            </summary>
            <param name="context">The component context.</param>
            <exception cref="T:System.ObjectDisposedException">this</exception>
            <exception cref="T:System.InvalidOperationException">Cannot change component context once the framework is initialized</exception>
        </member>
        <member name="T:Mimick.NumberHelper">
            <summary>
            A class containing helper methods for numeric operations.
            </summary>
        </member>
        <member name="M:Mimick.NumberHelper.Shrink(System.Double)">
            <summary>
            Consumes a numeric value, cast to a <see cref="T:System.Double"/>, to the appropriate smallest storage size.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Mimick.ReflectionHelper">
            <summary>
            A class containing methods and constants for reflection operations.
            </summary>
        </member>
        <member name="F:Mimick.ReflectionHelper.All">
            <summary>
            Binding flags used to find members that are both instanced or static, and public and non-public.
            </summary>
        </member>
        <member name="F:Mimick.ReflectionHelper.AllInstanced">
            <summary>
            Binding flags used to find members that are instanced and public or non-public.
            </summary>
        </member>
        <member name="M:Mimick.ReflectionHelper.GetAttributeInherited``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets an attribute from the provided member of the provided type, including any attributes inherited.
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
            <param name="member">The member.</param>
            <param name="inherit">Whether inherited attributes should also be selected.</param>
            <returns>The matched attribute value; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Mimick.ReflectionHelper.GetMethodsWithAttribute``1(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets a collection of methods from a provided type which have a provided attribute.
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
            <param name="type">The type to check.</param>
            <param name="binding">The optional method bindings.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> value.</returns>
        </member>
        <member name="M:Mimick.ReflectionHelper.GetPropertiesWithAttribute``1(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets a collection of properties from a provided type which have a provided attribute.
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
            <param name="type">The type to check.</param>
            <param name="binding">The optional method bindings.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> value.</returns>
        </member>
        <member name="M:Mimick.ReflectionHelper.IsDefaultAndAccessible(System.Reflection.ConstructorInfo)">
            <summary>
            Determines whether a constructor is both default (no required parameters) and accessible (public).
            </summary>
            <param name="method">The method.</param>
            <returns><c>true</c> if the constructor is the default; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.ReflectionHelper.IsSystem(System.Type)">
            <summary>
            Determines whether a specified type should be considered a system type.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the type should be considered a system type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Mimick.TypeHelper">
            <summary>
            A class containing helper methods for <see cref="T:System.Type"/> operations.
            </summary>
        </member>
        <member name="M:Mimick.TypeHelper.AutoConvert(System.String)">
            <summary>
            Converts a provided value into a corresponding type best matched to the content.
            </summary>
            <param name="value">The value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Mimick.TypeHelper.Convert(System.String,System.Type)">
            <summary>
            Converts a provided value into the requested type.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.InvalidCastException">If the value cannot be converted.</exception>
        </member>
        <member name="M:Mimick.TypeHelper.Default(System.Type)">
            <summary>
            Gets a default value for the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default value.</returns>
        </member>
        <member name="T:Mimick.ICache`2">
            <summary>
            An interface representing a cache containing values. A cache functions similar to a <see cref="T:System.Collections.Generic.IDictionary`2"/> implementation,
            but exposes additional configurations for managing the capacity and duration of entries, and supports automatic thread-safety.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="P:Mimick.ICache`2.Item(`0)">
            <summary>
            Gets or sets the value from the cache with the provided key.
            </summary>
            <param name="key">The cache entry key.</param>
            <returns>The cache entry value; otherwise, the default value of <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="P:Mimick.ICache`2.Count">
            <summary>
            Gets the number of entries within the cache.
            </summary>
        </member>
        <member name="P:Mimick.ICache`2.MaximumCount">
            <summary>
            Gets or sets the maximum number of entries which can exist within the cache. If the maximum count is reached,
            the oldest records in the cache will be removed.
            </summary>
        </member>
        <member name="P:Mimick.ICache`2.MaximumTime">
            <summary>
            Gets or sets the maximum amount of time that a value within the cache should persist. If this value is
            <see cref="F:System.TimeSpan.MaxValue"/> then the values will persist until the end of the application.
            </summary>
        </member>
        <member name="M:Mimick.ICache`2.Add(`0,`1)">
            <summary>
            Adds a value to the cache with the provided key. If an entry already exists for the provided key, the value
            is updated to the latest and the entry time is updated.
            </summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value.</param>
        </member>
        <member name="M:Mimick.ICache`2.Clear">
            <summary>
            Clears all entries from the cache.
            </summary>
        </member>
        <member name="M:Mimick.ICache`2.Get(`0)">
            <summary>
            Gets a value from the cache with the provided key.
            </summary>
            <param name="key">The entry key.</param>
            <returns>The cache entry value; otherwise, the default value of <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:Mimick.ICache`2.Remove(`0)">
            <summary>
            Removes an entry from the cache with the proivded key.
            </summary>
            <param name="key">The entry key.</param>
        </member>
        <member name="M:Mimick.ICache`2.TryGet(`0,`1@)">
            <summary>
            Gets a value from the cache with the provided key, and returns whether the value was retrieved successfully.
            </summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value target.</param>
            <returns><c>true</c> if the value was retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Mimick.IComponentContext">
            <summary>
            An interface representing a provider which registers and resolves components in the framework.
            </summary>
            <remarks>
            The Mimick framework provides a default component provider which is thread-safe and configured for
            many reads, with support for swapping components. If an implementing application already uses a component
            framework then a custom provider implementation can leverage the existing system.
            </remarks>
        </member>
        <member name="M:Mimick.IComponentContext.GetAllComponents">
            <summary>
            Gets an immutable collection containing all components which were recognised by the context.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> containing the component descriptors.</returns>
        </member>
        <member name="M:Mimick.IComponentContext.GetConfigurationComponents">
            <summary>
            Gets an immutable collection containing all configuration components which were recognised by the context. A component
            is considered a configuration if the class is decorated with the <see cref="T:Mimick.ConfigurationAttribute"/> class.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> containing the component descriptors.</returns>
        </member>
        <member name="M:Mimick.IComponentContext.Initialize">
            <summary>
            Initialize the component context by processing any types within the registered assemblies that have been
            decorated with the <see cref="T:Mimick.ConfigurationAttribute"/> decoration.
            </summary>
        </member>
        <member name="M:Mimick.IComponentContext.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers all classes within the provided assembly which have been decorated with <see cref="T:Mimick.ComponentAttribute"/>.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Mimick.IComponentContext.RegisterAssembly``1">
            <summary>
            Registers all classes within an assembly containing the provided type, which have been decorated with <see cref="T:Mimick.ComponentAttribute"/>.
            </summary>
            <typeparam name="T">The type of the target assembly.</typeparam>
        </member>
        <member name="M:Mimick.IComponentContext.Register``1">
            <summary>
            Register a provided type within the component provider using the default singleton lifetime.
            </summary>
            <typeparam name="TConcrete">The type.</typeparam>
            <returns>A configurator which can be used to further configure the component state.</returns>
        </member>
        <member name="M:Mimick.IComponentContext.Register``1(System.String[])">
            <summary>
            Register a provided type within the component provider using the default singleton lifetime.
            </summary>
            <typeparam name="TConcrete">The type.</typeparam>
            <param name="names">An optional collection of identifiers which the components will be stored under.</param>
            <returns>A configurator which can be used to further configure the component state.</returns>
        </member>
        <member name="M:Mimick.IComponentContext.Register``2">
            <summary>
            Register a provided interface and concrete type within the component provider using the default singleton lifetime.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <typeparam name="TConcrete">The concrete type.</typeparam>
            <returns>A configurator which can be used to further configure the component state.</returns>
        </member>
        <member name="M:Mimick.IComponentContext.Register``2(System.String[])">
            <summary>
            Register a provided interface and concrete type within the component provider using the default singleton lifetime.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <typeparam name="TConcrete">The concrete type.</typeparam>
            <param name="names">An optional collection of identifiers which the components will be stored under.</param>
            <returns>A configurator which can be used to further configure the component state.</returns>
        </member>
        <member name="M:Mimick.IComponentContext.Register(System.Type)">
            <summary>
            Register a provided type within the component provider using the default singleton lifetime.
            </summary>
            <param name="type">The type.</param>
            <returns>A configurator which can be used to further configure the component state.</returns>
        </member>
        <member name="M:Mimick.IComponentContext.Register(System.Type,System.String[])">
            <summary>
            Register a provided type within the component provider using the default singleton lifetime.
            </summary>
            <param name="type">The type.</param>
            <param name="names">An optional collection of identifiers which the components will be stored under.</param>
            <returns>A configurator which can be used to further configure the component state.</returns>
        </member>
        <member name="M:Mimick.IComponentContext.Register(System.Type,System.Type)">
            <summary>
            Register a provided interface and concrete type within the component provider using the default singleton lifetime.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <param name="concreteType">The concrete type.</param>
            <returns>A configurator which can be used to further configure the component state.</returns>
        </member>
        <member name="M:Mimick.IComponentContext.Register(System.Type,System.Type,System.String[])">
            <summary>
            Register a provided interface and concrete type within the component provider using the default singleton lifetime.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <param name="concreteType">The concrete type.</param>
            <param name="names">An optional collection of identifiers which the components will be stored under.</param>
            <returns>A configurator which can be used to further configure the component state.</returns>
        </member>
        <member name="M:Mimick.IComponentContext.Register``1(System.Object)">
            <summary>
            Register a provided object instance within the component provider as an implementation of the provided
            interface type, using the default singleton lifetime.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="instance">The object instance.</param>
        </member>
        <member name="M:Mimick.IComponentContext.Register(System.Object)">
            <summary>
            Register a provided object instance within the component provider using the default singleton lifetime.
            </summary>
            <param name="instance">The object instance.</param>
        </member>
        <member name="M:Mimick.IComponentContext.Register(System.Object,System.String[])">
            <summary>
            Register a provided object instance within the component provider using the default singleton lifetime.
            </summary>
            <param name="instance">The object instance.</param>
            <param name="names">An optional collection of identifiers which the components will be stored under.</param>
        </member>
        <member name="M:Mimick.IComponentContext.Resolve``1">
            <summary>
            Resolve a component of the provided type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The resolved component instance.</returns>
            <exception cref="T:System.ArgumentException">If the component cannot be resolved.</exception>
        </member>
        <member name="M:Mimick.IComponentContext.Resolve``1(System.String)">
            <summary>
            Resolve a component of the provided type with the provided name.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="name">The component name.</param>
            <returns>The resolved component instance.</returns>
            <exception cref="T:System.ArgumentException">If the component cannot be resolved.</exception>
        </member>
        <member name="M:Mimick.IComponentContext.Resolve(System.String)">
            <summary>
            Resolve a component with the provided name.
            </summary>
            <param name="name">The component name.</param>
            <returns>The resolved component instance.</returns>
            <exception cref="T:System.ArgumentException">If the component cannot be resolved.</exception>
        </member>
        <member name="M:Mimick.IComponentContext.Resolve(System.Type)">
            <summary>
            Resolve a component of the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>The resolve component instance.</returns>
            <exception cref="T:System.ArgumentException">If the component cannot be resolved.</exception>
        </member>
        <member name="M:Mimick.IComponentContext.Resolve(System.Type,System.String)">
            <summary>
            Resolve a component of the provided type with the provided name.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The component name.</param>
            <returns>The resolve component instance.</returns>
            <exception cref="T:System.ArgumentException">If the component cannot be resolved.</exception>
        </member>
        <member name="T:Mimick.IComponentDescriptor">
            <summary>
            An interface representing a descriptor of a component which has been registered in the framework. The descriptor contains information
            on the registration parameters of the component, and exposes the component designer which manages the activation of the component.
            </summary>
            <seealso cref="T:Mimick.IComponentDesigner"/>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="P:Mimick.IComponentDescriptor.Designer">
            <summary>
            Gets the component designer which can be used to activate the component.
            </summary>
        </member>
        <member name="P:Mimick.IComponentDescriptor.Interfaces">
            <summary>
            Gets the optional collection of interfaces which have been implemented by the component type.
            </summary>
        </member>
        <member name="P:Mimick.IComponentDescriptor.Names">
            <summary>
            Gets the optional collection of names associated with the component.
            </summary>
        </member>
        <member name="P:Mimick.IComponentDescriptor.Type">
            <summary>
            Gets the type of the component.
            </summary>
        </member>
        <member name="T:Mimick.IComponentDesigner">
            <summary>
            An interface representing a component designer responsible for managing instances of components within the framework.
            </summary>
        </member>
        <member name="P:Mimick.IComponentDesigner.IsDisposable">
            <summary>
            Gets whether the component designer can be disposed.
            </summary>
        </member>
        <member name="M:Mimick.IComponentDesigner.GetComponent">
            <summary>
            Gets a component instance from the designer.
            </summary>
            <returns>The component instance.</returns>
        </member>
        <member name="T:Mimick.IComponentRegistration">
            <summary>
            An interface containing options to configure the registration of one or more components within the framework.
            </summary>
        </member>
        <member name="M:Mimick.IComponentRegistration.ToScope(Mimick.Scope)">
            <summary>
            Sets the scope of the components, which determines how the components should persist.
            </summary>
            <param name="scope">The scope.</param>
            <returns></returns>
        </member>
        <member name="T:Mimick.IConfigurationContext">
            <summary>
            An interface representing the configurations context of the framework, which is the central source for resolving configuration values.
            </summary>
        </member>
        <member name="M:Mimick.IConfigurationContext.Register(Mimick.IConfigurationSource)">
            <summary>
            Register a configuration source within the configuration context.
            </summary>
            <param name="source">The configuration source.</param>
            <returns>A configurator which can be used to further configure the source.</returns>
        </member>
        <member name="M:Mimick.IConfigurationContext.Register``1">
            <summary>
            Register a configuration source within the configuration context of the provided type. The configuration source must have a default constructor.
            </summary>
            <typeparam name="T">The type of the configuration source.</typeparam>
            <returns>A configurator which can be used to further configure the source.</returns>
        </member>
        <member name="M:Mimick.IConfigurationContext.Resolve(System.String,System.String)">
            <summary>
            Resolves the value of a configuration from the configuration context with the provided name.
            </summary>
            <param name="name">The configuration name.</param>
            <param name="or">The value to return if the configuration could not be resolved.</param>
            <returns>The configuration value; otherwise, the value of <paramref name="or"/>.</returns>
        </member>
        <member name="M:Mimick.IConfigurationContext.Resolve(System.String,System.Type,System.Object)">
            <summary>
            Resolves the value of a configuration from the configuration context with the provided name,
            and attempts to automatically convert the value into the provided type.
            </summary>
            <param name="name">The configuration name.</param>
            <param name="type">The configuration type.</param>
            <param name="or">The value to return if the configuration could not be resolved.</param>
            <returns>The configuration value; otherwise, the value of <paramref name="or"/>.</returns>
            <exception cref="T:System.InvalidCastException">If the configuration value was found but could not be converted.</exception>
        </member>
        <member name="M:Mimick.IConfigurationContext.Resolve``1(System.String,``0)">
            <summary>
            Resolves the value of a configuration from the configuration context with the provided name,
            and attempts to automatically convert the value into the provided type.
            </summary>
            <typeparam name="T">The configuration type.</typeparam>
            <param name="name">The configuration name.</param>
            <param name="or">The value to return if the configuration could not be resolved.</param>
            <returns>The configuration value; otherwise, the value of <paramref name="or"/>.</returns>
            <exception cref="T:System.InvalidCastException">If the configuration value was found but could not be converted.</exception>
        </member>
        <member name="T:Mimick.IConfigurationDescriptor">
            <summary>
            An interface representing a descriptor of a configuration source which has been registered in the framework. The descriptor contains
            a reference to the configuration source, and contains information which customises the behaviour of the configurations.
            </summary>
        </member>
        <member name="P:Mimick.IConfigurationDescriptor.ExpiresAt">
            <summary>
            Gets the duration of time, from when the configuration source is loaded, to maintain the configuration source before issuing
            a <see cref="M:Mimick.IConfigurationSource.Refresh"/> invocation.
            </summary>
        </member>
        <member name="P:Mimick.IConfigurationDescriptor.Source">
            <summary>
            Gets the configuration source.
            </summary>
        </member>
        <member name="T:Mimick.IConfigurationRegistration">
            <summary>
            An interface containing options to configure the registration of a configuration within the framework.
            </summary>
        </member>
        <member name="M:Mimick.IConfigurationRegistration.Expires(System.TimeSpan)">
            <summary>
            Sets the duration of time after which the configuration source must be reloaded into memory using the
            <see cref="M:Mimick.IConfigurationSource.Refresh"/> method. The expiration is set to <see cref="F:System.Threading.Timeout.Infinite"/> by default.
            </summary>
            <param name="duration">The duration of time.</param>
            <returns></returns>
        </member>
        <member name="T:Mimick.IConfigurationSource">
            <summary>
            An interface representing a source which loads and resolves configuration values.
            </summary>
        </member>
        <member name="M:Mimick.IConfigurationSource.Load">
            <summary>
            Called when the configuration source has been requested and must prepare for resolution.
            </summary>
            <exception cref="T:Mimick.ConfigurationException">If the configuration source could not be loaded.</exception>
        </member>
        <member name="M:Mimick.IConfigurationSource.Refresh">
            <summary>
            Called when the configuration source must be refreshed and all existing values reloaded into memory.
            </summary>
            <exception cref="T:Mimick.ConfigurationException">If the configuration source could not be refreshed.</exception>
        </member>
        <member name="M:Mimick.IConfigurationSource.Resolve(System.String)">
            <summary>
            Resolve the value of a configuration with the provided name.
            </summary>
            <param name="name">The configuration name.</param>
            <returns>The configuration value; otherwise, <c>null</c> if the configuration could not be found.</returns>
            <exception cref="T:Mimick.ConfigurationException">If the configuration expression causes problems or the resolved value cannot be processed.</exception>
        </member>
        <member name="M:Mimick.IConfigurationSource.TryResolve(System.String,System.String@)">
            <summary>
            Attempt to resolve the value of a configuration with the provided name, and return whether it was resolved successfully.
            </summary>
            <param name="name">The configuration name.</param>
            <param name="value">The configuration value.</param>
            <returns><c>true</c> if the configuration is resolved; otherwise, <c>false</c>.</returns>
            <exception cref="T:Mimick.ConfigurationException">If the configuration expression causes problems or the resolved value cannot be processed.</exception>
        </member>
        <member name="T:Mimick.ConfigurationException">
            <summary>
            An exception class raised when a problem occurs during configuration reading or resolution.
            </summary>
        </member>
        <member name="M:Mimick.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ConfigurationException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mimick.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ConfigurationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="cause">The exception which caused the configuration failure.</param>
        </member>
        <member name="M:Mimick.ConfigurationException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.ConfigurationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="expression">The configuration expression.</param>
        </member>
        <member name="P:Mimick.ConfigurationException.Expression">
            <summary>
            Gets or sets the configuration expression which caused the issue.
            </summary>
        </member>
        <member name="T:Mimick.IFrameworkContext">
            <summary>
            An interface representing the current instance of the framework context active within the application.
            </summary>
        </member>
        <member name="P:Mimick.IFrameworkContext.ComponentContext">
            <summary>
            Gets the component context responsible for maintaining and resolving components.
            </summary>
        </member>
        <member name="P:Mimick.IFrameworkContext.ConfigurationContext">
            <summary>
            Gets the configuration context responsible for maintaining and resolving configurations.
            </summary>
        </member>
        <member name="P:Mimick.IFrameworkContext.TaskContext">
            <summary>
            Gets the task context responsible for maintaining timed and asynchronous tasks.
            </summary>
        </member>
        <member name="M:Mimick.IFrameworkContext.Initialize">
            <summary>
            Initialize the framework context in preparation for usage. This method must be called before the framework can be used.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the framework context has been initialized previously.</exception>
            <exception cref="T:System.ObjectDisposedException">If the framework context has been disposed.</exception>
        </member>
        <member name="M:Mimick.IFrameworkContext.SetComponentContext(Mimick.IComponentContext)">
            <summary>
            Update the framework context with a new component context manager, allowing for custom dependency container implementations.
            </summary>
            <param name="context">The component context.</param>
            <exception cref="T:System.ArgumentNullException">If the component context is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">If the framework context has been initialized.</exception>
            <exception cref="T:System.ObjectDisposedException">If the framework context has been disposed.</exception>
        </member>
        <member name="T:Mimick.IFreezable">
            <summary>
            An interface representing an object instance which supports being frozen, which prevents further modifications to the object.
            </summary>
            <remarks>
            A type implementing the <see cref="T:Mimick.IFreezable"/> interface should prevent modifications to fields and properties once the object has been frozen.
            </remarks>
        </member>
        <member name="P:Mimick.IFreezable.IsFrozen">
            <summary>
            Gets whether the object instance has been frozen.
            </summary>
        </member>
        <member name="M:Mimick.IFreezable.Freeze">
            <summary>
            Freezes the object instance and prevents further modifications to the fields and properties of the instance.
            </summary>
            <exception cref="T:Mimick.FrozenException">If the object has already been frozen.</exception>
        </member>
        <member name="T:Mimick.FrozenException">
            <summary>
            An exception class thrown when an attempt is made to modify a frozen object.
            </summary>
        </member>
        <member name="M:Mimick.FrozenException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.FrozenException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Mimick.IRequireSynchronization">
            <summary>
            An interface representing a synchronization base used when introducing concurrency.
            </summary>
        </member>
        <member name="P:Mimick.IRequireSynchronization.SynchronizationContext">
            <summary>
            Gets or sets the synchronization context used for concurrent read and write locks.
            </summary>
        </member>
        <member name="T:Mimick.ITaskContext">
            <summary>
            An interface representing a context which maintains timed and asynchronous tasks.
            </summary>
        </member>
        <member name="P:Mimick.ITaskContext.TimedTasks">
            <summary>
            Gets a collection of tasks which are configured to execute on intervals.
            </summary>
        </member>
        <member name="T:Mimick.ITimedInterval">
            <summary>
            An interface representing a time interval which describes when a task should execute.
            </summary>
        </member>
        <member name="M:Mimick.ITimedInterval.GetElapseTime(System.Nullable{System.DateTime},System.DateTime)">
            <summary>
            Gets an estimate of the time required until the next invocation based on the provided previous invocation time and the current time.
            </summary>
            <param name="previous">The optional date and time that the execution previously elapsed.</param>
            <param name="now">The date and time.</param>
            <returns>An estimate of the time until the next execution, in milliseconds; otherwise, <c>-1</c>.</returns>
        </member>
        <member name="M:Mimick.ITimedInterval.HasElapsed(System.Nullable{System.DateTime},System.DateTime)">
            <summary>
            Determines whether the interval has elapsed according to an optional previous invocation time and the current time.
            </summary>
            <param name="previous">The optional date and time that the execution previously elapsed.</param>
            <param name="now">The date and time.</param>
            <returns><c>true</c> if the interval has elapsed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Mimick.ITimedTask">
            <summary>
            An interface representing a task which executes on a timed or configured interval.
            </summary>
        </member>
        <member name="P:Mimick.ITimedTask.Data">
            <summary>
            Gets or sets optional data associated with the timed task.
            </summary>
        </member>
        <member name="P:Mimick.ITimedTask.Interval">
            <summary>
            Gets the timed interval which describes when the task should execute.
            </summary>
        </member>
        <member name="P:Mimick.ITimedTask.IsEnabled">
            <summary>
            Gets whether the timed task is enabled.
            </summary>
        </member>
        <member name="P:Mimick.ITimedTask.IsExecuting">
            <summary>
            Gets whether the timed task is currently executing.
            </summary>
        </member>
        <member name="P:Mimick.ITimedTask.LastExecutedAt">
            <summary>
            Gets the date and time that the task was last executed. If the task has not been executed in the scheduling system, this will return <c>null</c>.
            </summary>
        </member>
        <member name="M:Mimick.ITimedTask.Start">
            <summary>
            Starts the timed task processing within the application. If the task is already enabled, this method will do nothing.
            </summary>
        </member>
        <member name="M:Mimick.ITimedTask.Stop">
            <summary>
            Stops the timed task from processing within the application. This does not terminate any running tasks, but the
            <see cref="P:Mimick.ITimedTask.IsEnabled"/> property can be checked to see whether the task was terminated during execution.
            </summary>
        </member>
        <member name="M:Mimick.ITimedTask.Trigger">
            <summary>
            Triggers the timed task immediately, regardless of whether the task is enabled or of the scheduled state of the task. If the task
            is already executing, this method will do nothing.
            </summary>
            <remarks>
            If a task is triggered before the interval elapses, the task's last execution time will be updated to 
            </remarks>
        </member>
        <member name="T:Mimick.Tasks.FixedInterval">
            <summary>
            A timed interval class representing a fixed interval between task executions.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.FixedInterval.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Tasks.FixedInterval"/> class.
            </summary>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:Mimick.Tasks.FixedInterval.GetElapseTime(System.Nullable{System.DateTime},System.DateTime)">
            <summary>
            Gets an estimate of the time required until the next invocation based on the provided previous invocation time,
            and the current time, expressed in milliseconds.
            </summary>
            <param name="previous">The optional date and time that the execution previously elapsed.</param>
            <param name="now">The date and time.</param>
            <returns>
            An estimate of the time until the next execution, in milliseconds; otherwise, <c>-1</c>.
            </returns>
        </member>
        <member name="M:Mimick.Tasks.FixedInterval.HasElapsed(System.Nullable{System.DateTime},System.DateTime)">
            <summary>
            Determines whether the interval has elapsed according to an optional previous invocation time and the current time.
            </summary>
            <param name="previous">The optional date and time that the execution previously elapsed.</param>
            <param name="now">The date and time.</param>
            <returns>
              <c>true</c> if the interval has elapsed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Mimick.Tasks.TimedIntervalTask">
            <summary>
            A timed task class representing a task which executes at an interval between executions.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedIntervalTask.#ctor(Mimick.ITimedInterval,Mimick.Tasks.IntervalExecutionHandler,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Tasks.TimedIntervalTask"/> class.
            </summary>
            <param name="interval">The interval between executions.</param>
            <param name="handler">The handler executed when the interval has elapsed.</param>
            <param name="target">The optional target object instance the task executes against.</param>
        </member>
        <member name="M:Mimick.Tasks.TimedIntervalTask.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Mimick.Tasks.TimedIntervalTask"/> class.
            </summary>
        </member>
        <member name="P:Mimick.Tasks.TimedIntervalTask.Data">
            <summary>
            Gets or sets optional data associated with the timed task.
            </summary>
        </member>
        <member name="P:Mimick.Tasks.TimedIntervalTask.Interval">
            <summary>
            Gets the timed interval which describes when the task should execute.
            </summary>
        </member>
        <member name="P:Mimick.Tasks.TimedIntervalTask.IsEnabled">
            <summary>
            Gets whether the timed task is enabled.
            </summary>
        </member>
        <member name="P:Mimick.Tasks.TimedIntervalTask.IsExecuting">
            <summary>
            Gets whether the timed task is currently executing.
            </summary>
        </member>
        <member name="P:Mimick.Tasks.TimedIntervalTask.LastExecutedAt">
            <summary>
            Gets the date and time that the task was last executed. If the task has not been executed in the scheduling system, this will return <c>null</c>.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedIntervalTask.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedIntervalTask.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Mimick.Tasks.TimedIntervalTask.Start">
            <summary>
            Starts the timed task processing within the application. If the task is already enabled, this method will do nothing.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedIntervalTask.Stop">
            <summary>
            Stops the timed task from processing within the application. This does not terminate any running tasks, but the
            <see cref="P:Mimick.Tasks.TimedIntervalTask.IsEnabled" /> property can be checked to see whether the task was terminated during execution.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedIntervalTask.Trigger">
            <summary>
            Triggers the timed task immediately, regardless of whether the task is enabled or of the scheduled state of the task. If the task
            is already executing, this method will do nothing.
            </summary>
            <remarks>
            If manually triggered, this will not affect the scheduled state of the task, such that the task will trigger again when the interval
            has next elapsed. If the interval elapses while the task is processing, the trigger will do nothing but the scheduling system will record
            that the task was executed.
            </remarks>
        </member>
        <member name="T:Mimick.Tasks.IntervalExecutionHandler">
            <summary>
            A delegate method representing the handler invoked when a timed interval task has elapsed.
            </summary>
            <param name="instance">The optional object instance to execute the task against.</param>
        </member>
        <member name="T:Mimick.Tasks.TimedThread">
            <summary>
            A class representing a thread which executes during the application lifetime to ensure that timed tasks are executed.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedThread.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Tasks.TimedThread"/> class.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedThread.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Mimick.Tasks.TimedThread"/> class.
            </summary>
        </member>
        <member name="P:Mimick.Tasks.TimedThread.IsRunning">
            <summary>
            Gets whether the thread is running.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedThread.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedThread.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Mimick.Tasks.TimedThread.Add(Mimick.ITimedTask)">
            <summary>
            Adds a task to the timed thread for processing.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Mimick.Tasks.TimedThread.Execute">
            <summary>
            Executes the operations of the timed thread.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedThread.Start">
            <summary>
            Starts the execution of the timed thread. If the thread is already running, this method will do nothing.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedThread.StartIfRequired">
            <summary>
            Starts the execution of the timed thread if the thread is not running but is expected to do so.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedThread.StartThread">
            <summary>
            Starts the internal thread responsible for running the operational logic of the timed thread.
            </summary>
        </member>
        <member name="M:Mimick.Tasks.TimedThread.Stop">
            <summary>
            Stops the execution of the time thread, cancelling any future tasks.
            </summary>
        </member>
        <member name="T:Mimick.Values.Constant">
            <summary>
            A class representing a constant value parsed from a value expression.
            </summary>
        </member>
        <member name="M:Mimick.Values.Constant.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Values.Constant"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Mimick.Values.Constant.Type">
            <summary>
            Gets the type of the constant.
            </summary>
        </member>
        <member name="P:Mimick.Values.Constant.Value">
            <summary>
            Gets the value of the constant.
            </summary>
        </member>
        <member name="M:Mimick.Values.Constant.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Mimick.Values.Node">
            <summary>
            A class representing a node of a value.
            </summary>
        </member>
        <member name="F:Mimick.Values.Node.Next">
            <summary>
            The next node in the sequence.
            </summary>
        </member>
        <member name="F:Mimick.Values.Node.Previous">
            <summary>
            The previous node in the sequence.
            </summary>
        </member>
        <member name="F:Mimick.Values.Node.Parent">
            <summary>
            The parent container node which owns this node.
            </summary>
        </member>
        <member name="F:Mimick.Values.Node.Type">
            <summary>
            The type of content that the node contains.
            </summary>
        </member>
        <member name="F:Mimick.Values.Node.Value">
            <summary>
            The content of the node, boxed to an object value to be unboxed later.
            </summary>
        </member>
        <member name="F:Mimick.Values.Node.IsResolved">
            <summary>
            The indicator to whether the node has been resolved previously.
            </summary>
        </member>
        <member name="M:Mimick.Values.Node.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Mimick.Values.NodeType">
            <summary>
            Indicates the type of content that a node represents.
            </summary>
        </member>
        <member name="F:Mimick.Values.NodeType.Constant">
            <summary>
            The node contains a constant value.
            </summary>
        </member>
        <member name="F:Mimick.Values.NodeType.Group">
            <summary>
            The node contains child nodes contained within a group.
            </summary>
        </member>
        <member name="F:Mimick.Values.NodeType.Symbol">
            <summary>
            The node contains a symbol indicating a logical operation.
            </summary>
        </member>
        <member name="F:Mimick.Values.NodeType.Variable">
            <summary>
            The node contains a variable value which must be resolved during evaluation.
            </summary>
        </member>
        <member name="T:Mimick.Values.Operator">
            <summary>
            Indicates an operator symbol performing a logical operation.
            </summary>
        </member>
        <member name="F:Mimick.Values.Operator.Add">
            <summary>
            The symbol is an addition operator.
            </summary>
        </member>
        <member name="F:Mimick.Values.Operator.Divide">
            <summary>
            The symbol is a division operator.
            </summary>
        </member>
        <member name="F:Mimick.Values.Operator.Modulus">
            <summary>
            The symbol is a modulus operator.
            </summary>
        </member>
        <member name="F:Mimick.Values.Operator.Multiply">
            <summary>
            The symbol is a multiplication operator.
            </summary>
        </member>
        <member name="F:Mimick.Values.Operator.Subtract">
            <summary>
            The symbol is a subtraction operator.
            </summary>
        </member>
        <member name="T:Mimick.Values.Value">
            <summary>
            A class containing information on a potential value which has been parsed from text. A value contains constant
            and variable values, which can be read and assigned for evaluation.
            </summary>
        </member>
        <member name="M:Mimick.Values.Value.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Values.Value"/> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:Mimick.Values.Value.IsSimple">
            <summary>
            Gets whether the value is simple.
            </summary>
        </member>
        <member name="P:Mimick.Values.Value.IsVariable">
            <summary>
            Gets whether the value contains any variables.
            </summary>
        </member>
        <member name="P:Mimick.Values.Value.Variables">
            <summary>
            Gets an immutable list of the variables required in the value.
            </summary>
        </member>
        <member name="M:Mimick.Values.Value.Evaluate">
            <summary>
            Evaluates the value expression by processing any operators, constants and variables.
            </summary>
            <returns>The resulting value of the expression.</returns>
        </member>
        <member name="M:Mimick.Values.Value.Evaluate(System.Collections.Generic.IEnumerable{Mimick.Values.Node},System.TypeCode)">
            <summary>
            Evaluates the provided collection of nodes into a resulting value.
            </summary>
            <param name="nodes">The collection of nodes.</param>
            <param name="type">The expected value type.</param>
            <returns>The result of the nodes.</returns>
        </member>
        <member name="M:Mimick.Values.Value.Evaluate(System.Collections.Generic.IEnumerable{Mimick.Values.Node},Mimick.Values.Operator,System.TypeCode)">
            <summary>
            Evaluates the provided collection of nodes with the provided operator into a resulting value.
            </summary>
            <param name="nodes">The collection of nodes.</param>
            <param name="oper">The operator to process.</param>
            <param name="type">The expected value type.</param>
            <returns>The result of the nodes.</returns>
        </member>
        <member name="M:Mimick.Values.Value.EvaluateNode(Mimick.Values.Node,System.TypeCode)">
            <summary>
            Evaluates a single node by consuming the value of the node.
            </summary>
            <param name="node">The node.</param>
            <param name="type">The expected value type.</param>
            <returns>The node value.</returns>
        </member>
        <member name="M:Mimick.Values.Value.EvaluateOperation(System.Object,System.Object,Mimick.Values.Operator,System.TypeCode)">
            <summary>
            Evaluates an operation by processing two values using the provided type as the highest precedence.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <param name="oper">The operator.</param>
            <param name="type">The value type.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Mimick.Values.Value.GetTypeCode(System.Collections.Generic.IEnumerable{Mimick.Values.Node})">
            <summary>
            Gets the highest type-code for the provided collection of nodes.
            </summary>
            <param name="nodes">The collection of child nodes.</param>
            <returns>The type-code with the highest precedence.</returns>
        </member>
        <member name="M:Mimick.Values.Value.GetTypeCode(System.Object)">
            <summary>
            Gets the type-code for the provided value.
            </summary>
            <param name="value">The value.</param>
            <returns>The type-code.</returns>
        </member>
        <member name="M:Mimick.Values.Value.GetVariables(System.Collections.Generic.IEnumerable{Mimick.Values.Node})">
            <summary>
            Gets all variables from the root node of the value and populates the internal variable list.
            </summary>
            <param name="nodes">The collection of child nodes.</param>
        </member>
        <member name="M:Mimick.Values.Value.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Mimick.Values.Value.ToString(System.Collections.Generic.IEnumerable{Mimick.Values.Node})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Mimick.Values.ValueParser">
            <summary>
            A class responsible for parsing the content of a value expression into nodes.
            </summary>
        </member>
        <member name="M:Mimick.Values.ValueParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Values.ValueParser" /> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Mimick.Values.ValueParser.IsSymbol(System.Char)">
            <summary>
            Gets whether the provided character is a recognised symbol.
            </summary>
            <param name="c">The character.</param>
            <returns><c>true</c> if the character is a symbol; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Mimick.Values.ValueParser.Parse">
            <summary>
            Parse the content of the expression supplied into the constructor and retrieve the root value node.
            </summary>
            <returns>The <see cref="T:Mimick.Values.Node"/> value representing the expression.</returns>
        </member>
        <member name="M:Mimick.Values.ValueParser.ParseBeginGroup">
            <summary>
            Parses the beginning of a group from the expression.
            </summary>
        </member>
        <member name="M:Mimick.Values.ValueParser.ParseConstantNumber">
            <summary>
            Parses a constant number value.
            </summary>
        </member>
        <member name="M:Mimick.Values.ValueParser.ParseEndGroup">
            <summary>
            Parses the end of a group from the expression.
            </summary>
        </member>
        <member name="M:Mimick.Values.ValueParser.ParseFullString">
            <summary>
            Parses the whole expression as a constant string value.
            </summary>
        </member>
        <member name="M:Mimick.Values.ValueParser.ParseString">
            <summary>
            Parses a constant string value.
            </summary>
        </member>
        <member name="M:Mimick.Values.ValueParser.ParseSymbol">
            <summary>
            Parses a symbol value.
            </summary>
        </member>
        <member name="M:Mimick.Values.ValueParser.ParseVariable">
            <summary>
            Parses a variable value.
            </summary>
        </member>
        <member name="M:Mimick.Values.ValueParser.ThrowError(System.String)">
            <summary>
            Throws a <see cref="T:Mimick.Values.ValueParseException"/> using the current configuration.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Mimick.Values.ValueParseException">
            <summary>
            An exception class thrown when a value expression could not be processed.
            </summary>
        </member>
        <member name="M:Mimick.Values.ValueParseException.#ctor(System.Char[],System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Values.ValueParseException" /> class.
            </summary>
            <param name="buf">The value content.</param>
            <param name="index">The index.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Mimick.Values.ValueParseException.Excerpt">
            <summary>
            Gets the excerpt of the part of the expression which failed.
            </summary>
        </member>
        <member name="P:Mimick.Values.ValueParseException.Position">
            <summary>
            Gets the position within the expression.
            </summary>
        </member>
        <member name="T:Mimick.Values.Variable">
            <summary>
            A class representing a variable which must be resolved prior to an expression value being evaluated.
            </summary>
        </member>
        <member name="M:Mimick.Values.Variable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mimick.Values.Variable" /> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:Mimick.Values.Variable.Expression">
            <summary>
            Gets the variable expression.
            </summary>
        </member>
        <member name="P:Mimick.Values.Variable.Value">
            <summary>
            Gets or sets the value of the variable.
            </summary>
        </member>
        <member name="M:Mimick.Values.Variable.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
    </members>
</doc>
